.Language=Russian,Russian (Русский)
.PluginContents=Lua User Menu
.Options TabSize=4
.Options CtrlColorChar=\
.Options CtrlStartPosChar=¦

@Contents
$ #Пользовательское меню Lua# (~LUM~)
  LUM — утилита "Пользовательское меню Lua".
 Утилита позволяет выводить меню с учётом типа используемого файла.

    ~Организация меню~@LUM_Organize@
      ~Возможности меню~@LUM_Features@
      ~Примеры меню~@LUM_Examples@

      ~Управление меню~@LUM_Control@
      ~Структура меню~@LUM_Structure@
      ~Собственные меню~@LUM_OwnMenus@

    ~Формирование меню~@LUM_Formation@
      ~Привязка типа к меню~@LUM_MenuBinds@
      ~Содержимое файла меню~@LUM_MenuConts@
      ~Пункты таблицы‑меню~@LUM_MenuItems@

    #Подробности о меню#
      ~Алгоритм работы~@LUM_Algorithm@
      ~Файлы утилиты~@LUM_Files@

  Ссылки:
    ~Rh_Scripts~@<..\doc\>Contents@ pack

@Help
 ~LUM~@Contents@

@LUM_Algorithm
$ #Алгоритм работы#: LUM
  #Основные этапы алгоритма#:
  1. Управление настройками.
  2. Выбор файла с меню LUM.
  3. Формирование меню LUM.
  4. Управление меню LUM.

  Этапы вписаны в комментарии в виде
 \37--[[ <Полный номер этапа> <Название без точки> ]]\-
  Более мелкие блоки закомментированы в виде однострочных
комментариев на отдельных строках (заканчиваются точкой).
Дополнительные пояснения вписываются в конце операторов (уже без точки).

 ~Содержание~@Contents@

@LUM_Files
$ #Файлы утилиты#: LUM
  Основные файлы:
    \37LUM.lua\-            — ¦Меню LUM: Реализация.
    \37LumCfg.lua\-         — ¦Меню LUM: Настройка.
    \37LumWork.lua\-        — ¦Меню LUM: Работа с меню в целом.

  Файлы локализации:
    \37LuaUMDef.lua\-       - ¦Локализация LUM (английский язык).
    \37LuaUMRus.lua\-       - ¦Локализация LUM (Russian — русский язык).

  Файлы-скрипты:
    \37LuaFarMacros.lua\-   — ¦Управление макросами LuaFAR.
    \37LumContext.lua\-     — ¦Context и LUM: Вызовы функций.
    \37LumDialog.lua\-      — ¦Настройка LUM: Вызов диалогов.
    \37LumScripts.lua\-     — ¦Примеры реализации простых функций.

 ~Содержание~@Contents@

@LUM_Organize
$ #Организация меню#: LUM
  LUM загружает из файлов необходимые таблицы с меню и использует специальное
~таблично-заданное меню~@<..\Common\>UserMenu@ для вывода и работы меню.

      ~Возможности меню~@LUM_Features@
      ~Примеры меню~@LUM_Examples@

      ~Управление меню~@LUM_Control@
      ~Структура меню~@LUM_Structure@
      ~Собственные меню~@LUM_OwnMenus@

 ~Содержание~@Contents@

@LUM_Features
$ #Возможности меню#: LUM
 #Общие#:
  · ¦Привязка файла к типу в lua‑файле.
  · ¦Привязка типа к выводимому меню в lua‑файле.
  · ¦Поддерживаемые меню: обычное, прямоугольное, поисковое, фильтрационное.
 #Пункты меню#:
  · ¦Виды: подменю, макросы, шаблоны, скрипты и команды.
  · ¦Назначение комбинаций клавиш на пункты меню разными способами.
  · ¦Использование псевдонимов (с параметрами) в макросах FAR.
 #Настройка#:
  · ¦Просмотр параметров LUM по умолчанию.
  · ¦Настройка путей и имён основных файлов LUM.
  · ¦Настройка параметров отображения (вида) LUM.
  · ¦Вывод основных сообщений на языке интерфейса FAR.
  · ¦Вывод диалогов настройки на языке интерфейса FAR.
 #Собственные меню#:
  · ¦Поддержка настроек собственных меню.
  · ¦Поддержка настроек для отдельных подменю.
  · ¦Поддержка собственных файлов помощи FAR.
  · ¦Поддержка собственных локализаций текстов.
  · ¦Вывод определённого подменю как главного меню.

 ~Содержание~@Contents@

@LUM_Examples
$ #Примеры меню#: LUM
  Для редактора утилита выводит пользовательское меню, связанное
с типом файлов, к которому принадлежит файл, открытый в редакторе.
  Для панелей утилита выводит пользовательское меню, связанное
с типом файлов, к которому принадлежит текущий файл активной панели.

    ~LUM для Редактора~@<..\LuaEUM\>Contents@ (LuaEUM)
    ~LUM для Панелей~@<..\LuaPUM\>Contents@ (LuaPUM)
    ~LUM для fl_scripts~@<..\LumFLS\>Contents@ (LumFLS)

  См. также ~Собственные меню~@LUM_OwnMenus@.

 ~Содержание~@Contents@

@LUM_Control
$ #Управление меню#: LUM
  Управление (т.е. манипуляция) меню почти аналогично другим меню.

  Для упрощения навигации могут использоваться следующие клавиши:
 \37BackSpace\- (BS) — ¦переход в надменю,
 \37Escape  \- (Esc) — ¦отмена меню (выход без выбора),
 \37Ctrl+F1 \-       — ¦информация о меню в целом,
 \37Shift+F1\-       — ¦информация о текущем пункте меню,
 \37AccelKey\- / \37BreakKey\- — ¦выбор соответствующего пункта меню.

  AccelKey использует текущую раскладку клавиатуры и срабатывает быстрее.
BreakKey использует латинскую раскладку клавиатуры и срабатывает медленнее.

 ~Содержание~@Contents@     ~Организация меню~@LUM_Organize@

@LUM_Structure
$ #Структура меню#: LUM
  Предлагается следующая структура меню:
  — файл меню, ориентированный на конкретный тип;
  — файл меню по умолчанию, общий для всех файлов;
  — файл меню настройки конфигурации, рекомендуемый для всех файлов.

  Примеры пунктов-подменю:
  — #Lua scripts#     (Скрипты Lua)     — ¦различные lua‑скрипты.
  — #Template insert# (Вставка шаблона) — ¦~вставка стандартных шаблонов кода~@<..\LuaEUM\>LUM_TplIns@.
  — #Character sets#  (Наборы символов) — ¦вставка символов (из набора).
  …

 ~Содержание~@Contents@     ~Организация меню~@LUM_Organize@

@LUM_OwnMenus
$ #Собственные меню#: LUM
  Пользовательское меню LUM можно использовать для создания собственных меню.
В качестве основы можно использовать любое ~меню LUM~@LUM_Examples@.

  Настройка меню реализуется следующим образом:
нужно скопировать \37LuaEUMer.lua\- или \37LuaPUMer.lua\- в каталог скрипта
и задать в таблице \37ArgData\- свои значения параметров.

 ~Содержание~@Contents@     ~Организация меню~@LUM_Organize@

@LUM_Formation
$ #Формирование меню#: LUM
  Формирование меню осуществляется с помощью следующих файлов:

  — ¦~Файл привязки типа файла к меню~@LUM_MenuBinds@

  — ¦~Файлы с меню для типов файлов~@LUM_MenuConts@
  — ¦~Пункты меню и поля таблицы-меню~@LUM_MenuItems@

  Привязка имён файлов к типу осуществляется с помощью #LuaFAR context#.

 ~Содержание~@Contents@

@LUM_MenuBinds
$ #Привязка типа к меню#: LUM
  Привязка типа к меню задаётся с помощью файла \37LumBinds.lua\-.
 Каталог по умолчанию для файла: \37<Каталог пакета>\<Каталог LuaUM>\config\-.
  В настройках утилиты можно задать несколько файлов привязок.

  Название типа служит названием раздела. Раздел содержит следующий ключ:
  — #Menu#  — ¦с перечнем файлов ~меню~@LUM_MenuConts@.

    \1FПример\-:
  \3FDefault\37 = \3F{ \3ACaption\37 = "Some LUM"\3F,\-
              \3ABefore\37  = "BeforeItem1;BeforeItem2;",\-
              \3AAfter\37   = "AfterItem1;AfterItem2;UMConfig" \3F},\-
  \3Fhtml\37 = \3F{ \3AMenu\37 = "HtmlItem1;HtmlItem2" \3F},\-
  \3Flua\37  = \3F{ \3AMenu\37 = "LuaItem" \3F},\-

    Здесь:
  \37Caption \- — ¦заголовок главного меню.
  \37Before  \- — ¦список меню, добавляемых до меню для конкретного типа.
  \37After   \- — ¦список меню, добавляемых после меню для конкретного типа.
  \37XxxItemN\- — ¦название файла с пользовательским меню.
  \37UMConfig\- — ¦название файла с меню настройки конфигурации LUM.

  В этих перечнях расширения файлов можно не указывать,
по умолчанию для меню используется \37.lum\-.
  Раздел "#=#" служит для использования типа с существующим меню
как замены требуемого типа (например, в случае совпадения меню этих типов).

 ~Содержание~@Contents@     ~Формирование меню~@LUM_Formation@

@LUM_MenuConts
$ #Содержимое файла меню#: LUM
  Файлы с меню позволяют формировать различные меню.
 Каталог по умолчанию для файлов: \37<Каталог пакета>\<Каталог LuaUM>\config\-.
 (lum — сокращение от Lua User Menu.)

  Меню хранятся в файлах‑скриптах Lua с расширением \37.lum\- или \37.lua\-.
Первая строка lum‑файла в lua‑формате должна начинаться со строки
\37local\- или строки \37-- LUM\-, иначе файл считается ini‑файлом.

 ~Содержание~@Contents@     ~Формирование меню~@LUM_Formation@

@LUM_MenuItems
$ #Пункты таблицы‑меню#: LUM
  Раздел пункта для главного меню называется просто #Menu#.
Разделы пунктов меню могут содержать название раздела меню,
который их включает, и собственно название пункта меню после ".".

  Вид пункта и соответствующего действия задаётся с помощью ключей.

    ~Виды пунктов меню~@LUM_ItemKinds@
    ~Общие ключи пунктов~@LUM_Item_Keys@
    ~Использование клавиш~@LUM_Keyboard@

 ~Содержание~@Contents@     ~Формирование меню~@LUM_Formation@

@LUM_ItemKinds
$ #Виды пунктов меню#: LUM

    ~Метка~@LUM_Item_Label@       — ¦пункт-метка.
    ~Подменю~@LUM_Item_Menu@     — ¦вывод подменю.
    ~Разделитель~@LUM_Item_Separ@ — ¦разделитель пунктов меню.
    ~Макрос Lua~@LUM_Item_Seq@  — ¦запуск макроса Lua.

    ~Текст-шаблон~@LUM_Item_Plain@  — ¦вставка обычного текста.
    ~Макроc-шаблон~@LUM_Item_Macro@ — ¦вставка макроса‑шаблона.

    ~Скрипт Lua~@LUM_Item_Script@       — выполнение скрипта Lua.
    ~Команда ОС~@LUM_Item_OS_cmd@       — выполнение команды ОС.
    ~Командная строка~@LUM_Item_CmdLine@ — выполнение командной строки.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_EnvCfg
$ #Конфигурация среды#: LUM
  Таблица конфигурации среды включает в себя:
  — ¦конфигурация настроек пользовательского меню,
  — ¦сведения об используемом пункте меню.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Keys
$ Общие ключи пунктов меню: LUM
  В разделе пункта меню можно использовать следующие дополнительные ключи:

  #text# (string) — выводимое название пункта меню.

  #Kind# (string) — вид пункта меню.
    ¦Можно не задавать, т.к. он определяется по основным ключам разделов.

  #Area# (string) — область действия FAR для пункта меню.
  — ¦Ключ может иметь следующие значения:
\37panels\-, \37editor\-, \37viewer\-, \37dialog\-.
  — ¦Отсутствие ключа означает любую область FAR.
  — ¦Добавление \37;selected\- после имени области (или "")
означает необходимость наличия выделения в этой области.

  #Check# (func) — функция проверки включения пункта в меню.
  — ¦Результат функции определяет, будет ли пункт включён в меню.
  — ¦Аргумент — таблица ~конфигурации среды~@LUM_Item_EnvCfg@.

  #Selected# (bool) — признак выделения пункта при первом показе меню.

  #Inherit#  (bool) — признак наследования (для меню) свойств надменю.

  Пункт меню может содержать другие ключи, которые поддерживаются
соответствующим меню (см. ~MenuView~@LUM_Item_Menu@).
Например, \37far.Menu\- позволяет использовать следующие ключи:
#checked#, #disable#, #grayed#, #hidden#.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Label
$ Пункт #Метка#: LUM
  Пункт не выполняет никаких действий.

  Основной ключ: #Label# (bool).
  Ключ должен иметь значение \37true\-.

  Пункт может быть использован для вывода пунктов фиксированных рядов RectMenu.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Menu
$ Пункт #Подменю#: LUM
  Пункт выводит подменю.

  Основной ключ: #Items# (table).
  Ключ содержит перечисление разделов пунктов текущего меню.
  Он может содержать сокращённое название раздела пункта,
тогда сам раздел должен содержать ключ с именем этого сокращённого
названия и со значением названия раздела.

  Дополнительные ключи:

  #Title# (string) — заголовок подменю.
  — ¦Если ключа нет, заголовком служит значение #text# (исключая "&").

  #MenuView# (string) — вид выводимого меню.
    ¦Ключ может иметь следующие значения:
\37far.Menu\- (по умолчанию), \37RectMenu\- (прямоугольное меню),
\37FilterMenu\- (фильтрационное меню), \37SearchMenu\- (поисковое меню).

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Separ
$ Пункт #Разделитель#: LUM
  Пункт разделяет пункты меню.

  Основной ключ: #separator# (bool).
  Ключ должен иметь значение \37true\-.

  Можно указать #text# для вывода текста.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Seq
$ Пункт #Макрос Lua#: LUM
  Пункт запускает макрос Lua.

  Основной ключ: #LuaMacro# (string).
  Ключ задаёт текст макроса Lua.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Plain
$ Пункт #Текст-шаблон#: LUM
  Пункт вставляет обычный текст.

  Основной ключ: #Plain# (string).
  Ключ задаёт вставляемый текст.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Macro
$ Пункт #Макрос-шаблон#: LUM
  Пункт вставляет ~макрос-шаблон~@<..\Utils\>Macros@.

  Основной ключ: #Macro# (string).
  Ключ задаёт выполняемый макрос-шаблон.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_Script
$ Пункт #Скрипт Lua#: LUM
  Пункт выполняет скрипт Lua или функцию скрипта.

  Основной ключ: #Script#.

  Скрипт Lua задаётся следующими ключами:
  #Script#    — ¦имя файла скрипта или \37nil\-.
  #ChunkArgs# — ¦параметры, передаваемые только в порцию файла-скрипта.
  #Function#  — ¦имя глобальной функции в файле-скрипте или сама функция.
  #Arguments# — ¦параметры, передаваемые в порцию и функцию файла-скрипта.

  Замечания:
  — ¦#Script# может быть с путём относительно каталога скриптов меню LUM.
  — ¦Параметры указываются в стиле Lua и перечисляются через ",".
  — ¦Значение #ChunkArgs# можно указать в конце #Script# в скобках.
В этом случае осуществляется разбор #ChunkArgs# как строки аргументов.
  — ¦Значение #Arguments# можно указать в конце #Function# в скобках.
В этом случае осуществляется разбор #Arguments# как строки аргументов.

  Функция выполняется, если задан #Function# и если скрипт вернул
значение \37(nil, nil)\-. Это сделано для совместимости со скриптами,
используемыми в пунктах меню LuaFAR для Редактора (см. AddToMenu).

  ~Особенности выполнения скрипта~@LUM_Item_Script_Spec@

@LUM_Item_Script_Spec
$ #Особенности выполнения скрипта#: LUM
  Вызываемая порция скрипта Lua получает следующие аргументы:
  1. ¦Параметр порции скрипта из #ChunkArgs#
     или массив параметров порции скрипта из #Script#
     или (если нет #ChunkArgs#) имя функции скрипта из #Function#.
  2. ¦Таблица ~конфигурации среды~@LUM_Item_EnvCfg@, откуда вызван скрипт.

  Вызываемая функция скрипта Lua получает следующие аргументы:
  1. ¦Параметр порции скрипта из #Arguments#
     или массив параметров скрипта из #Function#.
  2. ¦Таблица конфигурации среды, откуда был вызван скрипт:
     конфигурация LUM и сведения о пункте меню.

  Если скрипт является модулем, при вызове функции \37module\- имя модуля
должно быть указано явно. Не допускается использование составных имён.

  Ключ #Relative# позволяет использовать скрипты из произвольного каталога.
 Он может иметь следующие значения:
  \37LUM\-      — ¦каталог с пользовательским меню,
  \37Plugin\-   — ¦каталог плагина LuaFAR для Редактора,
  \37scripts\-  — ¦каталог scripts в каталоге плагина,
  \37DefUM\-    — ¦каталог LuaUM (т.е. каталог с базовым скриптом LUM.lua),
  \37default\-  — ¦каталог scripts в каталоге LuaUM (для скриптов по умолчанию).

  Если ключ не указан, используется каталог скриптов из настроек.
Другие значения рассматриваются как путь относительно каталога плагина.

  ~Скрипт Lua~@LUM_Item_Script@

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_OS_cmd
$ Пункт #Команда ОС#: LUM
  Пункт выполняет команду ОС.

  Основной ключ: #Command# (string).
  Ключ задаёт выполняемую команду ОС.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Item_CmdLine
$ Пункт #Командная строка#: LUM
  Пункт выполняет команду через командную строку FAR.

  Основной ключ: #CmdLine# (string).
  Ключ задаёт выполняемую команду.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@

@LUM_Keyboard
$ #Использование клавиш#: LUM
  Для быстрого выбора пунктов меню используйте клавиши, определив
для них горячие клавиши и/или "быстрые" клавиши или клавиши‑прерыватели.

  #Горячая клавиша# (hot key)

  Для пункта меню можно задать горячую клавишу.
Она указывается в #text# символом "\37&\-" перед выбранной "горячей буквой".
Для выбора такого пункта нажмите клавишу <буква> или \37Alt\-+<буква>.

  Кроме того, можно задать специальную комбинацию клавиш, указав её
или в #AccelKey# (полное название клавиши), или в #AccelStr# (краткое название).
  Для #AccelKey# название клавиши получится, если убрать префикс "\37KEY_\-"
из названия виртуального кода этой клавиши. Информация о внутренних кодах
клавиш содержится в FAR Manager Encyclopedia (раздел "Типы и определения",
подраздел "KEY_* — Коды клавиш FAR Manager", тема "Коды клавиш FAR Manager").
  В случае #AccelStr# модификаторы перечисляются перед клавишей подряд,
отделяются от неё знаком "+", и обозначаются следующими буквами:
  "\37A\-" — \37Alt\-, "\37C\-" — \37Ctrl\-, "\37S\-" — \37Shift\-.

 ~Содержание~@Contents@     ~Содержимое файла меню~@LUM_MenuConts@
