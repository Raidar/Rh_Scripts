--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Quotes and brackets.
  -- Кавычки и скобки.
--]]
--------------------------------------------------------------------------------

local unpack = unpack

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local locale = require 'context.utils.useLocale'

----------------------------------------
local farUt = require "Rh_Scripts.Utils.Utils"
local farEdit = require "Rh_Scripts.Utils.Editor"

local farBlock  = farEdit.Block
local farSelect = farEdit.Selection

--local RedrawAll = farUt.RedrawAll

--------------------------------------------------------------------------------
local unit = {}

---------------------------------------- Locale
local Custom = {
  label = "Quoting",
  name = "lum",
  path = "Rh_Scripts.LuaUM.config.",
  locale = { kind = 'require' },

} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)

end

---------------------------------------- Internal
local Text = {

  Enquote = false,
  Dequote = false,
  Requote = false,

} ---

function Text.Enquote (Args, Cfg)

  local Area = farUt.GetAreaType()
  --logShow(Args, Area)
  if Area == "editor" then
    return farSelect.Enquote(unpack(Args))

  elseif Args and Args[1] and Args[2] then
    -- TODO: Save position after 1 and then restore after 2
    -- TODO: Add Position handling functions to Utils\Dialog.lua
    return farUt.InsertText(Area, Args[1]..Args[2])

  end
end ---- Enquote

function Text.Dequote (Args, Cfg)

  local Area = farUt.GetAreaType()
  if Area == "editor" then
    return farSelect.Dequote(unpack(Args))

  end
end ---- Dequote

function Text.Requote (Args, Cfg)

  local Area = farUt.GetAreaType()
  if Area ~= "editor" then return end

  local function mRequote (block) --> (block)

    if block == nil then
      if not farSelect.Dequote(unpack(Args.dequote)) then return end

      return farSelect.Enquote(unpack(Args.enquote))

    end

    block = farBlock.Dequote(block, unpack(Args.dequote))
    if not block then return end

    return farBlock.Enquote(block, unpack(Args.enquote))

  end --

  return farSelect.Process(true, mRequote)

end ---- Requote

---------------------------------------- Separator
local mSeparator = {

  separator = true,

} ---

---------------------------------------- Enquote
function unit.EnquoteItems ()

  local mQuoteMarks = {
    { text = L.LuaEnquoteQuotes,
      Label = true, },
    { hot = "'", left = "'", right = "'", },
    { hot = '"', left = '"', right = '"', },
    { hot = ";", left = "‹", right = "›", },
    { hot = ":", left = "«", right = "»", },
    --mSeparator,
    { hot = "1", left = "‘", right = "’", },
    { hot = "2", left = "“", right = "”", },
    { hot = "3", left = "‚", right = "‘", },
    { hot = "4", left = "„", right = "“", },

    { text = L.LuaEnquoteBrackets,
      Label = true, },
    { hot = "[", left = "[", right = "]", },
    { hot = "{", left = "{", right = "}", },
    { hot = "(", left = "(", right = ")", },
    mSeparator,

    --{ text = L.LuaEnquoteOthers,
    --  Label = true, },
    { hot = "<", left = "<", right = ">", },
    { hot = ">", left = "⟨", right = "⟩", },
    { hot = "/", left = "/", right = "/", },
    { hot ="\\", left ="\\", right ="\\", },

    { text = L.LuaEnquoteComments,
      Label = true, },
    { hot = "data", pad = "   ", left = "{ ", right = " }", },
    { hot = "pas ", pad = "   ", left = "(*", right = "*)", },
    { hot = "c/c⧺", pad = "  ", left = "/* ", right = " */", },
    mSeparator,
    { hot = "xml ", pad = " ",  left = "<!--",  right = "-->", },
    { hot = "lua ", pad = "",   left = "--[[ ", right = " ]]--", },
    --{ hot = "lua ", pad = "",   left = "--[[",  right = "--]]", },
    mSeparator,
    mSeparator,

    { text = L.LuaEnquoteMarkers,
      Label = true, },
    { hot = "|", left = "|", right = "|", },
    mSeparator,
    { hot = "#", left = "#", right = "#", },
    { hot = "$", left = "$", right = "$", },
    { hot = "%", left = "%", right = "%", },
    { hot = "^", left = "^", right = "^", },
    { hot ="&&", left = "&", right = "&", },
    { hot = "*", left = "*", right = "*", },

    { text = L.LuaEnquoteMarkers,
      Label = true, },
    { hot = "`", left = "`", right = "`", },
    { hot = "~", left = "~", right = "~", },
    { hot = "-", left = "-", right = "-", },
    { hot = "_", left = "_", right = "_", },
    { hot = "=", left = "+", right = "+", },
    { hot = "+", left = "‾", right = "‾", },
    mSeparator,
    mSeparator,

    -- [[
    { text = L.LuaEnquoteSpecials,
      Label = true, },
    { hot = " ", left = "⌊", right = "⌋", },
    { hot = " ", left = "⌈", right = "⌉", },
    { hot = " ", left = "⟦", right = "⟧", },
    --mSeparator,
    { text = L.LuaEnquoteReplace,
      --Label = true, },
      separator = true, },
    { hot = "q",
      --note = L.LuaQuoteReplace,
      Function = Text.Requote,
      dequote = { 1, 1, true, },
      enquote = { '"', '"', true, },
    },
    { hot = "w",
      --note = L.LuaQuoteReplace,
      Function = Text.Requote,
      dequote = { 1, 1, true, },
      enquote = { '«', '»', true, },
    },
    mSeparator,
    mSeparator,
    --]]

    -- [[
    { text = L.LuaEnquoteReadMe,
      Label = true, },
    { hot = " ", left = "{= ", right = "}", },
    { hot = " ", left = "{/ ", right = "}", },
    mSeparator,
    mSeparator,
    { text = L.LuaEnquoteTagging,
      Label = true, },
    { hot = " ", pad = " ", left = "<>", right = "</>",  AccelStr = "RC+,", },
    { hot = " ",            left = "[=]", right = "[/]", AccelStr = "RCRA+.", },
    { hot = " ",            left = "{=}", right = "{/}", AccelStr = "RCRAS+.", },
    --]]

  } --- mQuoteMarks

  local t = {}

  local format = string.format
  local QuoteTextFmt = "&%s - %s%s|%s%s"

  for k = 1, #mQuoteMarks do
    local v = mQuoteMarks[k]
    local u
    if v.hot then
      if not v.Function then
        u = {
          text = format(QuoteTextFmt, v.hot,
                        v.pad or "", v.left,
                        v.right, v.note or ""),
          Hint = v.hint,
          AccelStr = v.AccelStr,
          Function = Text.Enquote,
          Arguments = { v.left, v.right, true, },
        } ---

      else
        local w = v.enquote
        u = {
          text = format(QuoteTextFmt, v.hot,
                        v.pad or "", w[1],
                        w[2], v.note or ""),
          AccelStr = v.AccelStr,
          Function = v.Function,
          Arguments = v,
        } ---

      end
    else
      u = v

    end

    t[#t + 1] = u

  end -- for

  --logShow(t, "mEnquote", "", { tnaming = false, astable = true })

  return t

end ---- EnquoteItems

local mEnquote = {

  text = L.LuaEnquote,
  -- [[
  MenuView = "RectMenu",

  Props = {
    RectMenu = {
      Rows = 9,
      Order = "V",
      Fixed = { HeadRows = 1, HeadCols = 0, },

      IsStatusBar = true,
    },

  }, -- Props

  CfgData = {
    UMenu = {
      TextNamedKeys = false,
      UseMenuTexter = false,
    },

  }, -- CfgData
  --]]

  Items = unit.EnquoteItems,

} --- mEnquote

---------------------------------------- Dequote
function unit.DequoteItems ()

  local t = {
    { text = L.LuaDequoteSingle,
      Function = Text.Dequote,
      Arguments = { 1, 1, true, },
    },
    { text = L.LuaDequoteDouble,
      Function = Text.Dequote,
      Arguments = { 2, 2, true, },
    },
    { text = L.LuaDequoteXmlComment,
      --Area = ";selected",
      Function = Text.Dequote,
      Arguments = { "<!--", "-->", false, },
    },
    { text = L.LuaDequoteLuaComment,
      --Area = ";selected",
      Function = Text.Dequote,
      Arguments = { "--[[", "]]", false, },
    },

  } ---

  return t

end ---- DequoteItems

local mDequote = {

  text = L.LuaDequote,

  Items = unit.DequoteItems,

} --- mDequote

---------------------------------------- Items/Menu
local mQuoting = {

  text = L.LuaQuoteText,
  --Area = "editor",

  Items = {
    mEnquote,   -- Закавычивание
    mDequote,   -- Раскавычивание

  }, --- Items

} --- mQuoting

---------------------------------------- Data
local Data = {

  Menu = {
    text = L.LuaScripts,
    Items = { mQuoting, },

  },

  ["Quoting"] = mQuoting,
  ["Quoting.Enquote"] = mEnquote,
  ["Quoting.Dequote"] = mDequote,

} --- Data

return Data
--------------------------------------------------------------------------------
