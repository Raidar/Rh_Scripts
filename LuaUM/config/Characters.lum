--[[ LuaUM ]]--

----------------------------------------
--[[ description:
  -- Characters kits.
  -- Наборы символов.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local tables = require 'context.utils.useTables'
local locale = require 'context.utils.useLocale'

----------------------------------------
local Rh_Scripts = Rh_Scripts

local CharsMenu -- require in unit.MakeMenu
--local CharsMenu = require "Rh_Scripts.Common.CharsMenu"

--------------------------------------------------------------------------------
local unit = {}

---------------------------------------- Main data
unit.ScriptName = "Characters"
unit.ScriptPath = "Rh_Scripts.LuaUM.config"
unit.HistoryPath= ("%s.%s.%s."):format("scripts",
                                       unit.ScriptPath,
                                       unit.ScriptName)

unit.ScriptData = Rh_Scripts[unit.ScriptPath] or {}
Rh_Scripts[unit.ScriptPath] = unit.ScriptData

---------------------------------------- Custom
local DefCustom = {

  label   = "Chars",
  name    = "lum",
  path    = unit.ScriptPath..".",

  history = {
    field   = "",
    name    = unit.ScriptName,
    path    = unit.HistoryPath,

  },

  locale  = {
    kind    = 'require',

  },

} --- DefCustom

---------------------------------------- Locale
local LocCustom = tables.copy(DefCustom, false, pairs, true)
local L, e1, e2 = locale.localize(LocCustom)
if L == nil then
  return locale.showError(e1, e2)

end

---------------------------------------- Items
-- Группы наборов.
-- Пока содержит только локализованное название группы.
unit.KitGroups = {

  Chars = true,
  Keybd = true,
  Maths = true,
  Punct = true,
  Techs = true,
  Draws = true,

} -- KitGroups

-- Данные о наборах.
unit.KitsData = {

  CharacterMap      = { Group = "All",   Hot = "*", text = 0, Title = 0, },

  Chars_Greek       = { Group = "Chars", Hot = "G", text = 0, Title = 0, },
  Chars_Hebrew      = { Group = "Chars", Hot = "H", text = 0, Title = 0, },

  Keybd_Cyrillic    = { Group = "Keybd", Hot = "V", text = 0, Title = 0, },

  Maths_Symbols     = { Group = "Maths", Hot = "M", text = 0, Title = 0, },
  Maths_Scripts     = { Group = "Maths", Hot = "X", text = 0, Title = 0, },
  --Maths_Indexes     = { Group = "Maths", Hot = "O", text = 0, Title = 0, },

  Punct_Symbols     = { Group = "Punct", Hot = "`", text = 0, Title = 0, },
  Punct_Spaces      = { Group = "Punct", Hot = "~", text = 0, Title = 0, },

  Techs_Arrows      = { Group = "Techs", Hot = "A", text = 0, Title = 0, }, -- TODO

  Draws_Boxing      = { Group = "Draws", Hot = "B", text = 0, Title = 0, }, -- TODO

} -- KitsData

do
  local pairs = pairs
  local gL = unit.KitGroups

  local textFmt = "&%s - %s"  -- m/b utf-8 string
  local titleFmt = "%s: %s"   -- m/b utf-8 string

-- Localize value in gL.
for k in pairs(gL) do
  gL[k] = L["Chs"..k]

end --

  local KitsData = unit.KitsData

-- Localize text & Title in KitsData.
for k, v in pairs(KitsData) do

  local text = L["Chs"..k] or k
  v.text  = textFmt:format(v.Hot, text)

  local gl = gL[v.Group]
  v.Title = gl and titleFmt:format(gl, text) or text

end --

end -- do

----------------------------------------
do
  local DefConfig = {

    Name  = "",
    text  = "",
    Title = "",

    Props = {

      Bottom = L.EscToQuit,

    }, -- Props

    CfgData = {

      UMenu = {
        BottomHotKeys = false,
        ReturnToUMenu = true,
      }, --

    }, -- CfgData

  } --- DefConfig

  local setmetatable = setmetatable

  local KitsData = unit.KitsData

-- Таблица для конфигурации меню.
function unit.MakeKindConfig (Name, Default) --> (table)

  local Config = {}
  Default = Default == nil and true or Default
  if Default then Config.__index = DefConfig end

  Config.Name  = Name
  local NameData = KitsData[Name]
  Config.text  = NameData.text
  Config.Title = NameData.Title

  if Default then
    return setmetatable(Config, Config)

  end

  return Config

end ---- MakeKindConfig

  local tcopy = tables.clone --copy

function unit.MakeColors (Props) --> (Props)

  local colors = require 'context.utils.useColors'
  local basics = colors.BaseColors

  local Basis = {
    --StandardFG  = basics.navy,
    --MarkedFG    = basics.red,
    --MarkedFG    = basics.navy,
    MarkedFG    = basics.white,
    --MarkedFG    = basics.black,
    --BorderFG    = basics.black,
    --TitleFG     = basics.black,
    --StatusBarFG = basics.black,
    --ScrollBarFG = basics.black,

  } --- Basis

  local menUt = require "Rh_Scripts.Utils.Menu"

  local RM = Props.RectMenu or {}
  RM.Colors = menUt.MenuColors(Basis)

  Props.RectMenu = RM
  --logShow(RM.Colors, "Colors", "w d2 xv8")

end ---- MakeColors

-- Сформировать меню из набора символов.
function unit.MakeKindMenu (Cfg, Props, Datas, Keys) --> (Menu)

  Keys = Keys or "AccelKey"
  Cfg = type(Cfg) == 'table' and Cfg or unit.MakeKindConfig(Cfg)

  Cfg.DefCustom = Cfg.DefCustom or tcopy(DefCustom, false, pairs, true)
  local h = Cfg.DefCustom.history
  if h then h.name = Cfg.Name or h.name end
  --logShow(h, Cfg.Name)

  unit.MakeColors(Props)

  return CharsMenu.MakeMenu(Cfg, Props, Datas, Keys)

end ---- MakeKindMenu

end -- do

-- Использовать пробелы как обычные символы.
function unit.UseSpace (Menu) --| Menu.Items

  CharsMenu.SetLabelItemsText(Menu.Items, " ", "_")
  CharsMenu.SetKeyItemsField(Menu.Items, "Space$", false)

  --return Menu
end ----

-- Использовать компактное меню для умещения на экране.
function unit.CompactMenu (Menu) --| Menu.Props.RectMenu

  local RM = Menu.Props.RectMenu
  --RM.BoxKind = ""
  --RM.Shadowed = false
  --RM.MenuEdgeH = 0
  RM.ItemPadding = false
  RM.Separators = "V"

end ---- CompactMenu

---------------------------------------- Characters ----

----------------------------------------
local Chars = {}

do
  local U = unicode.utf8.char

  Chars.BS = U(0x0008)
  Chars.LF = U(0x000A)
  Chars.CR = U(0x000D)

end -- do

---------------------------------------- CharacterMap
function unit.CharacterMap ()

  local Name = "CharacterMap"
  local Menu = unit.ScriptData[Name]

  --[[
  if Menu then
    --logShow(Menu, Name, "w d0")
    if type(Menu) == 'function' then
      Menu = Menu()
      unit.ScriptData[Name] = Menu

    elseif type(Menu) == 'table' and
           type(Menu.Items) == 'function' then
      Menu.Items = Menu.Items()

    end
  end
  --]]

  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = "0123456789ABCDEF"

  local CharRows  = 0x10     -- Количество строк символов
  local CharCols  = 0x10     -- Количество столбцов символов
  local CharMin   = 0x0000   -- Минимальный символ
  local CharMax   = 0xFFFD   -- Максимальный символ
  local U = unicode.utf8.char

  local Datas = {
    " ",

  } ---
  for k = 1, CharMax do
    Datas[#Datas + 1] = U(k)

  end

  local strings = require 'context.utils.useStrings'
  local uCP2s = strings.ucp2s

  local KeyOrder = { [0] = "────", }
  for k = CharMin, CharMax, CharCols do
    KeyOrder[#KeyOrder + 1] = uCP2s(k, true)

  end

  local Props = {

    Order   = Order,
    KeyOrder = KeyOrder,
    Serial  = true,
    --Heading = "Order",
    Heading = "Both",

    RectMenu = {
      LineMax = 1,
      TextMax = { [0] = 1; 4, },

      --TextMark = true,

      MaxHeight = 2 + 1 + CharRows + 2 + 0,

    }, -- RectMenu

    RectItem = {
      TextMark = true,

    }, -- RectItem

  } --- Props

  local Cfg = unit.MakeKindConfig(Name, false)
  Cfg.LazyMake = true -- Отложенное формирование меню

  do
    local colors = require 'context.utils.useColors'
    local basics = colors.BaseColors

    local Basis = {
      StandardFG  = basics.navy,
      --MarkedFG    = basics.red,
      MarkedFG    = basics.black,
      BorderFG    = basics.black,
      TitleFG     = basics.black,
      --StatusBarFG = basics.black,
      ScrollBarFG = basics.black,

    } --- Basis

    local menUt = require "Rh_Scripts.Utils.Menu"
    Props.RectMenu.Colors = menUt.FormColors(Basis)
    --logShow(Cfg.Colors, "Colors", "w d2 xv8")

  end -- do

  --[[
  local function MakeMenu ()

    Menu = unit.MakeKindMenu(Cfg, Props, Datas, "None")
    unit.ScriptData[Name] = Menu

    return Menu

  end -- MakeMenu

  return MakeMenu
  --]]

  Menu = unit.MakeKindMenu(Cfg, Props, Datas, "None")
  unit.ScriptData[Name] = Menu
  --Menu.hidden = true -- Меню как скрытый пункт

  return Menu

end ---- CharacterMap
--unit.CharacterMap = nil

---------------------------------------- Letters etc
function unit.Chars_Greek ()

  local Name = "Chars_Greek"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = [[abcdefghijklmnopqrstuvwxyz`│[];',./\1234567890-= ]]
  local Datas = -- Char + Shift              │
                [[αβχδεφγηιϕκλμνοπθρστυϖωξψζ΄│[];',./,1234567890-= ]]..
                [[ΑΒΧΔΕΦΓΗΙϑΚΛΜΝΟΠΘΡΣΤΥϐΩΞΨΖ΅│{}:"<>?°!@#$%^&*()_+]]..Chars.BS..
                -- Ctrl + Shift              │
                [[   ϯϵϥϫϩϳϰϗϡϻϟϙϸ ϱςϲϒϭϣϝ ϛ │[];',./́        []±≈]]..Chars.CR..
                [[   Ϯ϶ϤϪϨ ϴϏϠϺϞϘϷ ϼϽϹ ϬϢϜ Ϛ │{}:"<>?        {}∓≉ ]]..
                -- Alt + Shift               │
                [[ά   έ  ήίϊ    ό     ύϋώ   ΄│[];',./\1234567890−≡ ]]..
                [[Ά   Έ  ΉΊΪ    Ό     ΎΫΏ   ΅│{}:"<>?|!@#$%^&*()≂≢ ]]..
                -- Ctrl+Alt + Shift          │
                [[                           │   ʼ  …―          ≍≣ ]]..
                [[                           │   ˮ  &‾| #$% &*  ≭≠ ]]

  local Props = {

    Order   = Order,
    Serial  = true,
    --Heading = "Order",
    Heading = "Both",

  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  unit.UseSpace(Menu)
  --unit.CompactMenu(Menu)
  Menu.Props.RectMenu.ItemPadding = false
  --logShow(Menu, Name, 3)
  unit.ScriptData[Name] = Menu

  return Menu

end ---- Chars_Greek

function unit.Chars_Hebrew ()

  local Name = "Chars_Hebrew"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = [[abcdefghijklmnopqrstuvwxyz`│[];',./\1234567890-= ]]
  local Datas = -- Char + Shift              │
                [[אבצדהטגחי כלמנעפקרשת  ו  ז`│[];',./\1234567890-= ]]..
                [[  ץ       ך םן ף          ~│{}:"<>?|!@#$%^&*()_+]]..Chars.BS..
                -- Ctrl + Shift              │
                [[                           │       ́        []±≈]]..Chars.CR..
                [[                           │               {}∓≉ ]]

  local Props = {

    Order   = Order,
    Serial  = true,
    --Heading = "Order",
    Heading = "Both",

    --RectItem = {
    --  TextMark = true,
    --
    --},

    --CharsMenu = {
    --  OnMakeItems = nil,
    --
    --}, --

    CharsItem = {
      OnMakeCharItem = function (item, index, order, key, capt, Props)

        if not item then return end

        if order < 27 then
          item.text = item.text.."‎"


        end
      end, -- OnMakeCharItem

    }, --

  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  --logShow(Menu, "Chars_Hebrew", 2)
  unit.UseSpace(Menu)
  --unit.CompactMenu(Menu)
  Menu.Props.RectMenu.ItemPadding = false
  --Menu.Props.RectMenu.PaddingLChar = ""
  --Menu.Props.RectMenu.PaddingRChar = "‎" -- 0x200E
  unit.ScriptData[Name] = Menu

  return Menu

end ---- Chars_Hebrew

---------------------------------------- Keyboard
function unit.Keybd_Cyrillic ()

  local Name = "Keybd_Cyrillic"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = [[abcdefghijklmnopqrstuvwxyz`[];',./\│1234567890-= ]]
  local Datas = -- Char + Shift                      │
                [[фисвуапршолдьтщзйкыегмцчняёхъжэбю.,│1234567890-= ]]..
                [[ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯЁХЪЖЭБЮ,°│!@#$%^&*()_+]]..Chars.BS..
                -- Ctrl + Shift                      │
                [[ѳіҁѹў ѱ ѵѡљѓјѿѻѯѝќїѣґ ѕџњꙗѥћђӂєѫѧӏ́│        []±≈]]..Chars.CR..
                [[ѲІҀѸЎ Ѱ ѴѠЉЃЈѾѺѮЍЌЇѢҐ ЅЏЊꙖѤЋЂӁЄѪѦӀ│        {}∓≉ ]]..
                -- Alt + Shift                       │
                [[әӣҫ ӳӑԥһѷө ԑӯңѽҙҡқ ӗғӎꙅҷүҗ`ҳ ;',./\│1234567890−≡ ]]..
                [[ӘӢҪ ӲӐԤҺѶӨ ԐӮҢѼҘҠҚ ӖҒӍꙄҶҮҖ~Ҳ :"<>?|│!@#$%^&*()≂≢ ]]..
                -- Ctrl+Alt + Shift                  │
                [[ӫӥ  ӱӓ   ӧԓӡ ӈ ӟ ӄӹӕ  ӌӵұӝѐҕҥ ʼѭѩ…―│          ≍≣ ]]..
                [[ӪӤ  ӰӒ   ӦԒӠ Ӈ Ӟ ӃӸӔ  ӋӴҰӜЀҔҤ$ˮѬѨ&‾│| #$% &*  ≭≠ ]]

  local Props = {

    Order   = Order,
    Serial  = true,
    --Heading = "Order",
    Heading = "Both",

  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  --logShow(Menu, "Chars_Cyrillic", 2)
  unit.UseSpace(Menu)
  --unit.CompactMenu(Menu)
  Menu.Props.RectMenu.ItemPadding = false
  unit.ScriptData[Name] = Menu

  return Menu

end ---- Keybd_Cyrillic

---------------------------------------- Mathematics
function unit.Maths_Symbols ()

  local Name = "Maths_Symbols"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = [[abcdefghijklmnopqrstuvwxyz│1234567890=-`[];',./\ ]]
  local Datas = -- Char + Shift             │
                [[abcdefghijklmnopqrstuvwxyz│1234567890-=`[];',./\ ]]..
                [[ABCDEFGHIJKLMNOPQRSTUVWXYZ│!@#$%^&*()_+~{}:"<>?|]]..Chars.BS..
                -- Ctrl + Shift             │
                [[Å ℃°ℇ℉ ℏ  K⅃   π      Ω℮  │ ∶ ∷  ≺≻⋜⋝±≈∼  ×∕<>/́]]..Chars.CR..
                [[  ℂ    ℍ     ℕ ℙℚℝ       ℤ│      ⊀⊁  ∓≉≁⟦⟧⋆ ≮≯\§ ]]..
                -- Alt + Shift              │
                [[ℵ ⊂∂∑   ∞ ∁∈∋  ∏∅√∫′∪∨⋎∃ ⊃│  ∵ ≲≳≾≿≼≽−≡≃（）⋅ ≤≥/\ ]]..
                [[∀ ⊄∆⅀  ‖∝  ∉∌∇ ℿ ∛∬″∩∧⋏∄ ⊅│  ∴ ≴≵  ⋠⋡≂≢≄［］∗ ≰≱?| ]]..
                -- Ctrl + Alt + Shift       │
                [[∠ ⊆  ⁄ ∥⟂∕ ∊∍    ∜∭‴ ⊽ ¬ ⊇│    ⋦⋧⋨⋩⋞⋟≍≣∽｛｝∘∣  …― ]]..
                [[∟ ⊈  ‒ ∦ ∖        ∮  ⊼ ⊻ ⊉│          ≭≠⋍＜＞∙∤≪≫&‾ ]]

  local Props = {

    Order   = Order,
    Serial  = true,
    Heading = "Both",

  } ---

  local SVKeyFuncs = CharsMenu.SVKeyFuncs
  local Keys = {

    Kind = "AccelKey";
    CharsMenu.SVKeyValue,   SVKeyFuncs.S,
    SVKeyFuncs.C,           SVKeyFuncs.CS,
    SVKeyFuncs.A,           SVKeyFuncs.AS,
    SVKeyFuncs.CA,          SVKeyFuncs.CAS,

  } --- Keys

  Menu = unit.MakeKindMenu(Name, Props, Datas, Keys)
  unit.UseSpace(Menu)
  --unit.CompactMenu(Menu)
  Menu.Props.RectMenu.ItemPadding = false
  --logShow(Menu, Name, 3)
  unit.ScriptData[Name] = Menu

  return Menu

end ---- Maths_Symbols

function unit.Maths_Scripts ()

  local Name = "Maths_Scripts"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = [[1234567890=-`[]│abcdefghijklmnopqrstuvwxyz/\ ]]
  local Datas = -- Char + Shift  │
                [[₁₂₃₄₅₆₇₈₉₀₊₋₌₍₎│ₐ   ₑ  ₕᵢⱼₖₗₘₙₒₚ ᵣₛₜᵤᵥ ₓ  .  ]]..
                [[¹²³⁴⁵⁶⁷⁸⁹⁰⁺⁻⁼⁽⁾│ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖ ʳˢᵗᵘᵛʷˣʸᶻ, ]]..Chars.BS..
                -- Ctrl + Shift  │
                [[1234567890+−=()│abcdefghijklmnopqrstuvwxyz °]]..Chars.CR..
                [[⅟½⅓¼⅕⅙⅐⅛⅑⅒˖˗⁄  │ABCDEFGHIJKLMNOPQRSTUVWXYZ‒ ]]..
                -- Alt + Shift   │
                [[ ⅔¾⅘⅚ ⅞        │                          /\ ]]..
                [[ ⅖⅗ ⅝  ⅜     ʿʾ│ᴬᴮ ᴰᴱ ᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾ ᴿ ᵀᵁⱽᵂ   ?| ]]

  local Props = {

    Order   = Order,
    Serial  = true,
    Heading = "Both",

  } ---

  local SVKeyFuncs = CharsMenu.SVKeyFuncs
  local Keys = {

    Kind = "AccelKey";
    CharsMenu.SVKeyValue,   SVKeyFuncs.S,
    SVKeyFuncs.C,           SVKeyFuncs.CS,
    SVKeyFuncs.A,           SVKeyFuncs.AS,
    SVKeyFuncs.CA,          SVKeyFuncs.CAS,

  } --- Keys

  Menu = unit.MakeKindMenu(Name, Props, Datas, Keys)
  unit.UseSpace(Menu)
  --unit.CompactMenu(Menu)
  Menu.Props.RectMenu.ItemPadding = false
  --logShow(Menu, Name, 3)
  unit.ScriptData[Name] = Menu

  return Menu

end ---- Maths_Scripts

---------------------------------------- Technology
function unit.Techs_Arrows ()

  local Name = "Techs_Arrows"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = "aijklmnprstuvxy"
  local Datas = -- Char + Shift
                "ₐᵢⱼₖₗₘₙₚᵣₛₜᵤᵥₓ "..
                "ᵃⁱʲᵏˡᵐⁿᵖʳˢᵗᵘᵛˣʸ"..
                -- Ctrl + Shift
                "               "..
                "ᴬᴵᴶᴷᴸᴹᴺᴾᴿ ᵀᵁⱽ  "--..
                -- Alt + Shift
                --"               "

  local Props = {

    Order   = Order,
    Serial  = true,
    Heading = "Both",

  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  unit.ScriptData[Name] = Menu

  return Menu

end ---- TechsArrows

---------------------------------------- Punctuation
--[[
/   - dot/point
a   - acute
op  - prime + modifier apostroph
qw  - quote
b   - bullet
--]]
function unit.Punct_Symbols ()

  local Name = "Punct_Symbols"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = [[agxcdimopqwbv│`1234567890-/\ ]]
  local Datas = -- Char + Shift│
                [[́̀̂̌̇̈̄‵′‟”•ˈ│´‼⁇§¯°ˆ¸˙«»-…, ]]..
                [[̭̬̣̤̱̋̏‶″‛’‣ˌ│˝¡¿† ‰ˇ˛¨‹›–․ ]]..Chars.BS..
                -- Ctrl + Shift│
                [[̲̍̎̆̑̓̊‷‴„“◦ │ ⁉⁈‡_‱˘ ˚ʿʾ—‥ ]]..Chars.CR..
                [[̩͈̮̯̦̥̅ ⁗‚‘⁃ │˟ ⸮¦‾ ⁏⁊ ˓˒‑⁝  ]]..
                -- Alt + Shift │
                [[  ͑͗̔̉̃ʹʼˋˊ⁌ │ʻ‽⸘ˌˍ|˂˃˜⁀‿‒   ]]..
                [[    ̨̰̒ʺˮˎˏ⁍ │ʽ⁅⁆ˈˉ―˄˅˷⁐⁔    ]]..
                -- Ctrl + Alt + Shift
                [[  ̧͔͕͘̕      │   ※    ⁓      ]]
--[=[
  \x0300—\x036F - Combining Diacritical Marks.
  Greeks:
  ʹ - Greek Numeral Sign (Dexia keraia)
  ͵ - Greek Lower Numeral Sign (Aristeri keraia)
  ͺ - Greek Ypogegrammeni
  ΄ - Greek Tonos
  ΅ - Greek Dialytika Tonos
  \x0483-\x0487 Combining Cyrillic
  etc
--]=]

  local Props = {

    Order   = Order,
    Serial  = true,
    Heading = "Both",

  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  unit.UseSpace(Menu)
  --Menu.Props.RectMenu.ItemPadding = false
  Menu.Props.RectMenu.PaddingLChar = " "
  Menu.Props.RectMenu.PaddingRChar = ""
  unit.ScriptData[Name] = Menu

  return Menu

end ---- Punct_Symbols

function unit.Punct_Spaces ()

  local Name = "Punct_Spaces"
  local Menu = unit.ScriptData[Name]
  --if Menu then return Menu end
  if Menu then return Menu.UpdateInsArea() end

  local Order = {

    { '     " "', ' ', }, { ' "-"/Num-', '-', 'Subtract', },
    { '     "`"', '`', }, { ' "="/Num+', '=', 'Add',      },
    --{ '     " "', ' ', 'Multiply', }, { ' "-"/Num-', '-', 'Subtract', },
    --{ '     "`"', '`', 'Divide',   }, { ' "="/Num+', '=', 'Add',      },
    --{ '     " "', ' ', 'MULTIPLY', }, { ' "-"/Num-', '-', 'SUBTRACT', },
    --{ '     "`"', '`', 'DIVIDE',   }, { ' "="/Num+', '=', 'ADD',      },
    { '     "1"', '1'  }, { '   Num*  ', '=', 'Multiply', },

  } --- Order

  -- Spaces: '            ​'
  -- Dashes: '‑­—–‒‐‧'
  local Datas = {

    { ' ', 'Thin space ', }, { '­', 'Soft hyphen', },
    { ' ', 'Figure spc ', }, { '‒', 'Figure dash', },
    { ' ', 'Em/3 space ', }, { ' ', ' Math space', },

    { ' ', ' En  space ', }, { '–', '  En dash  ', },
    { ' ', 'Punct.space', }, { '−', '   Minus   ', },
    { ' ', 'Em/4 space ', }, { ' ', '           ', },

    { ' ', ' Em  space ', }, { '—', '  Em dash  ', },
    { ' ', 'Hair space ', }, { '‐', '  Hyphen   ', },
    { ' ', 'Em/6 space ', }, { ' ', '           ', },

    { ' ', 'N-b. space ', }, { '‑', 'N-b. hyphen', },
    { ' ', 'Narrow nbsp', }, { '‧', 'Hyphen. pt.', },
    { ' ', '           ', }, { '​', 'Zero w. sp.', },

    --[[
    { '',  '        ',    }, { '_', '          ', },
    { '',  '           ', }, { '',  '         ',  },
    --]]

  } --- Datas

  local Props = {

    Order   = Order,
    Serial  = true,
    Heading = "Both",
    --___ = true, -- DEBUG

  } --- Props

  local Cfg = unit.MakeKindConfig(Name, false)
  Menu = unit.MakeKindMenu(Cfg, Props, Datas, CharsMenu.DefDoubleKeys)
  --logShow(Menu, Name, "w d3")
  unit.ScriptData[Name] = Menu

  return Menu

end ---- Punct_Spaces

--------------------------------------------------------------------------------

---------------------------------------- Menu making

---------------------------------------- ---- Menu

function unit.MakeMenu ()

  --logShow("unit.MakeMenu", "unit.MakeMenu")

  CharsMenu = require "Rh_Scripts.Common.CharsMenu"

  local gL = unit.KitGroups
  local sSectionFmt = " %s "

  return {
    text  = L.ChsKitItem,
    Title = L.CharacterKits,

    --Inherit = false,

    Items = {

      { text = sSectionFmt:format(gL.Chars),
        separator = true, },
      unit.Chars_Greek,
      unit.Chars_Hebrew,

      { text = sSectionFmt:format(gL.Keybd),
        separator = true, },
      unit.Keybd_Cyrillic,

      { text = sSectionFmt:format(gL.Maths),
        separator = true, },
      unit.Maths_Symbols,
      unit.Maths_Scripts,
      --unit.Maths_Indexes,

      --{ text = sSectionFmt:format(gL.Techs), separator = true, },
      --unit.Techs_Arrows,

      { text = sSectionFmt:format(gL.Punct),
        separator = true, },
      unit.Punct_Symbols,
      unit.Punct_Spaces,

      --{ text = sSectionFmt:format(gL.Draws), separator = true, },
      --unit.Draws_Boxing,

      --{ separator = true, },
      --unit.CharacterMap,

    }, -- Items

  } ----

end ---- MakeMenu

---------------------------------------- Data
local Data = {

  Menu = {
    text = L.CharacterKits,

    Items = { unit.MakeMenu },

  },

  ["Characters"] = unit.MakeMenu,

} --- Data

--logShow(Data, "Characters.lum")

return Data
--------------------------------------------------------------------------------
