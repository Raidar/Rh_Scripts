--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Subtitles: correction.
  -- Субтитры: корректирование.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local tables = require 'context.utils.useTables'

--------------------------------------------------------------------------------

----------------------------------------
local subs = require "Rh_Scripts.LuaUM.scripts.Subtitles"

---------------------------------------- Locale
local L = subs.Locale

do
  local caps = {}

--logShow(L, "Localize", nil, { pairs = tables.allpairs })
for k, v in tables.allpairs(L) do

  --if k:find('cap_', 1, true) then logShow({ name, v, k }, "cap") end
  local name = type(k) == 'string' and k:match("^cap%_(.*)$")
  if name then
    caps[name] = v
  end
end

  local format = string.format

for k, v in pairs(caps) do

    local hot = L["hot_"..k]
    --logShow({ k, v, h }, "cap+hot")
    L["itm_"..k] = hot and type(v) == 'string' and
                   format("&%s - %s", hot, v) or v
end
--logShow(L, "Extended Localize")

end -- do

---------------------------------------- Separator
local mSeparator = {

  separator = true,

} ---

---------------------------------------- Current clause
local mCurrentClause = {

  text = L.CurrentClause,

  Items = {
    { text = L.itm_CurClauseAll,
      Function = subs.CurClauseAll, },
    { text = L.itm_CurClauseStart,
      Function = subs.CurClauseStart, },
    { text = L.itm_CurClauseLen,
      Function = subs.CurClauseLen, },
    { text = L.itm_CurClauseGap,
      Function = subs.CurClauseGap, },
    --mSeparator,

  }, -- Items

} --- mCurrentClause

---------------------------------------- Items/Menu
local mSubtitles = {

  text = L.Subtitles,

  Items = {
    mCurrentClause,

    mSeparator,
    { text = L.itm_SubtitleType,
      Function = subs.SubtitleType, },
    { text = L.itm_CurClauseData,
      Function = subs.CurClauseData, },

  }, -- Items

} --- mSubtitles

---------------------------------------- Data
local Data = {

  Menu = {
    text = L.Subtitles,
    Items = { mSubtitles, },

  },

  ["Subtitles"] = mSubtitles,
  ["Subtitles.CurrentClause"] = mCurrentClause,

} --- Data

return Data
--------------------------------------------------------------------------------
