--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Template Insert: html.
  -- Вставка шаблона: html.
--]]
--------------------------------------------------------------------------------

local format = string.format

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local locale = require 'context.utils.useLocale'

----------------------------------------
local farUt = require "Rh_Scripts.Utils.Utils"

--------------------------------------------------------------------------------

---------------------------------------- Locale
local Custom = {
  label = "TplIns",
  name = "lum",
  path = "Rh_Scripts.LuaEUM.config.",
  locale = { kind = 'require' },

} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)

end

---------------------------------------- Internal

-- Quote text considering selected block.
-- Закавычивание текста с учётом выделенного блока.
--[[
  -- @params:
  left  (string) - left "quote".
  right (string) - right "quote".
--]]
local function QuoteText (left, right) --> (macro)
  --logShow(farUt.EditorSelType(), tag)
  if farUt.EditorSelType() == "none" then
    -- Выделенного блока нет: курсор внутри "кавычек":
    return format("%s@Here%s@Back", left, right)

  end

  -- Выделенный блок есть: блок внутри кавычек, курсор вне кавычек:
  return format("@Cut%s@Paste%s", left, right)

end -- QuoteText

-- Insert paired tag considering selected block.
-- Вставка парного тега с учётом выделенного блока.
--[[
  -- @params:
  tag   (string) - tag name.
  block   (bool) - flag for block-level tag.
--]]
local function PairTag (tag, block) --> (macro)
  --logShow(farUt.EditorSelType(), tag)
  if farUt.EditorSelType() == "none" then
    -- Выделенного блока нет: курсор внутри тега:
    local block = block and "@Enter@Enter@Up" or "" -- блочный элемент
    return format("<%s>@Here</%s>@Back%s", tag, tag, block)

  end

  -- Выделенный блок есть: блок внутри тега, курсор вне тега:
  --local count = tag:len() + 3
  local block = block and "@Enter" or "" -- блочный элемент
  return format("@Cut<%s>%s@Paste%s</%s>", tag, block, block, tag)

end -- PairTag

-- Insert single tag with parameter considering selected block.
-- Вставка одиночного тега с параметром с учётом выделенного блока.
--[[
  -- @params:
  tag   (string) - tag name.
  param (string) - param name.
  rest  (string) - rest params of tag.
  block   (bool) - flag for block-level tag.
--]]
local function SingleTag (tag, param, rest, block) --> (macro)
  --logShow(farUt.EditorSelType(), tag)
  if farUt.EditorSelType() == "none" then
    -- Выделенного блока нет: курсор внутри параметра тега:
    local block = block and "" or "" -- блочный элемент
    return format('<%s %s="@Here"%s%s />@Back',
                  tag, param, rest or "", block)
  end

  -- Выделенный блок есть: блок и курсор внутри параметров тега:
  --local count = tag:len() + 3
  return format('@Cut<%s %s="@Here"%s />@Left@4@Paste@Back',
                tag, param, rest or "")
end -- SingleTag

-- Insert paired tag with parameter considering selected block.
-- Вставка парного тега с параметром с учётом выделенного блока.
--[[
  -- @params:
  tag   (string) - tag name.
  param (string) - param name.
  rest  (string) - rest params of tag.
  block   (bool) - flag for block-level tag.
--]]
local function ParamTag (tag, param, rest, block) --> (macro)
  --logShow(farUt.EditorSelType(), tag)
  if farUt.EditorSelType() == "none" then
    -- Выделенного блока нет: курсор внутри параметра тега:
    local block = block and "@Enter@Enter" or "" -- блочный элемент
    return format('<%s %s="@Here"%s>%s</%s>@Back',
                  tag, param, rest or "", block, tag)
  end

  -- Выделенный блок есть: блок внутри тега, курсор внутри параметра тега:
  return format('@Cut<%s %s="@Here"%s>@Paste</%s>@Back',
                tag, param, rest or "", tag)
end -- ParamTag

---------------------------------------- Lines
--local substr = string.sub

local line_lim = 80
--local line_len = line_lim - 2
--local link_len = line_lim - 4
local note_len = line_lim - 7
local spec_len = line_lim - 7
--local line_fmt = "--%s"
--local link_fmt = "--%s--"
local note_fmt = "<!--%s-->"
local spec_fmt = "<!--%s-->"
local l_hymin = ('-'):rep(line_lim)
local l_equal = ('='):rep(line_lim)
local l_stars = ('*'):rep(line_lim)

---------------------------------------- ----
local mInsert = {

  text  = L.TplInsItem,
  Title = L.TemplateInsert,
  MenuView = "RectMenu",

  Props = {
    RectMenu = {
      Cols = 5,
      Fixed = { HeadRows = 1, HeadCols = 1, },

      IsStatusBar = true,
    },

  }, -- Props

  CfgData = {
    UMenu = {
      TextNamedKeys = false,
      UseMenuTexter = false,
    },

  }, -- CfgData

  Items = {
    -- Header --
    { text = " ", Label = true },
    { text = "   <a>   ", Label = true },
    { text = "Shift+<a>", Label = true },
    { text = " Ctrl+<a>", Label = true },
    { text = " Alt+<a> ", Label = true },
    -- - -- comment
    { text = "-", Label = true },
    { text = "<!------->",
      Plain = format(note_fmt, l_hymin:sub(1, note_len)),
      AccelStr = "-" },
    { text = "<!--===-->",
      Plain = format(note_fmt, l_equal:sub(1, note_len)),
      AccelStr = "S+-" },
    { text = "<!-- r -->",
      Macro = "<!--  -->@Left@4",
      AccelStr = "C+-" },
    { text = "<!--***-->",
      Plain = format(spec_fmt, l_stars:sub(1, spec_len)),
      AccelStr = "A+-" },
    -- A -- anchor
    { text = "A", Label = true },
    { text = "Anchor href",
      Macro = ParamTag("a", "href"),
      AccelStr = "A" },
    { text = "Anchor name",
      Macro = ParamTag("a", "name"),
      AccelStr = "S+A" },
    { text = "A-r target",
      Macro = ParamTag("a", "name", ' target=""'),
      AccelStr = "C+A" },
    { text = "Abbreviate",
      Macro = PairTag("abbr"),
      AccelStr = "A+A" },
    -- B -- physical format
    { text = "B", Label = true },
    { text = "Bold",
      Macro = PairTag("b"),
      AccelStr = "B" },
    { text = "Italic",
      Macro = PairTag("i"),
      AccelStr = "S+B" },
    { text = "Bidi Orient",
      Macro = PairTag("bdo"),
      AccelStr = "C+B" },
    { text = "Html Body",
      Macro = PairTag("body", true),
      AccelStr = "A+B" },
    -- C -- cite / quote
    { text = "C", Label = true },
    { text = "Cite",
      Macro = PairTag("cite"),
      AccelStr = "C" },
    { text = "Cite Quote",
      Macro = PairTag("q"),
      AccelStr = "S+C" },
    { text = "BlockQuote",
      Macro = PairTag("blockquote", true),
      AccelStr = "C+C" },
    { text = "Acronym",
      Macro = PairTag("acronym"),
      AccelStr = "A+C" },
    -- D -- definition
    { text = "D", Label = true },
    { text = "Def-Data",
      Macro = PairTag("dd"),
      AccelStr = "D" },
    { text = "Def-Term",
      Macro = PairTag("dt"),
      AccelStr = "S+D" },
    { text = "Def-List",
      Macro = PairTag("dl", true),
      AccelStr = "C+D" },
    { text = "DeFiNition",
      Macro = PairTag("dfn"),
      AccelStr = "A+D" },
    -- E -- logical format
    { text = "E", Label = true },
    { text = "EmPhasis",
      Macro = PairTag("em"),
      AccelStr = "E" },
    { text = "Strong",
      Macro = PairTag("strong"),
      AccelStr = "S+E" },
    { text = "PreFormat",
      Macro = PairTag("pre", true),
      AccelStr = "C+E" },
    { text = "TeleType",
      Macro = PairTag("tt"),
      AccelStr = "A+E" },
    -- F -- frame
    { text = "F", Label = true },
    { text = "Frame",
      Macro = SingleTag("frame", "name", ' src=""'),
      AccelStr = "F" },
    { text = "Frame Set",
      Macro = PairTag("frameset", true),
      AccelStr = "S+F" },
    { text = "Inner Frame",
      Macro = SingleTag("iframe", "name", ' src=""'),
      AccelStr = "C+F" },
    { text = "No Frames",
      Macro = PairTag("noframes", true),
      AccelStr = "A+F" },
    -- H -- heading
    { text = "H", Label = true },
    { text = "Heading 1",
      Macro = PairTag("h1"),
      AccelStr = "H" },
    { text = "Heading 2",
      Macro = PairTag("h2"),
      AccelStr = "S+H" },
    { text = "Heading 3",
      Macro = PairTag("h3"),
      AccelStr = "C+H" },
    { text = "Html Head",
      Macro = PairTag("head", true),
      AccelStr = "A+H" },
    -- I -- object / change
    { text = "I", Label = true },
    { text = "Image",
      Macro = SingleTag("img", "alt", ' src=""'),
      AccelStr = "I" },
    { text = "Insert",
      Macro = PairTag("ins"),
      AccelStr = "S+I" },
    { text = "Delete",
      Macro = PairTag("del"),
      AccelStr = "C+I" },
    { text = "Object",
      Macro = ParamTag("object", "classid"),
      AccelStr = "A+I" },
    -- K -- link
    { text = "K", Label = true },
    { text = "Link rel",
      Macro = SingleTag("link", "rel", ' href=""'),
      AccelStr = "K" },
    { text = "Link style",
      Macro = SingleTag('link rel="stylesheet" type="text/css"', "href"),
      --Macro = SingleTag('link rel="stylesheet" type="text/css"', "href", '@Left.css@Right'),
      AccelStr = "S+K" },
    { text = "Link favicon",
      Macro = SingleTag('link rel="shortcut icon" type="image/x-icon"', "href"),
      --Macro = SingleTag('link rel="shortcut icon" type="image/x-icon"', "href", '@Leftfavicon.ico@Right'),
      AccelStr = "C+K" },
    { text = "Base link",
      Macro = SingleTag("base", "href"),
      AccelStr = "A+K" },
    -- L -- list
    { text = "L", Label = true },
    { text = "List Item",
      Macro = PairTag("li"),
      AccelStr = "L" },
    { text = "Ordered List",
      Macro = PairTag("ol", true),
      AccelStr = "S+L" },
    { text = "Unord. List",
      Macro = PairTag("ul", true),
      AccelStr = "C+L" },
    { text = "Html Title",
      Macro = PairTag("title"),
      AccelStr = "A+L" },
    -- M -- meta
    { text = "M", Label = true },
    { text = "Meta name",
      Macro = SingleTag("meta", "name", ' content=""'),
      AccelStr = "M" },
    { text = "Meta h-eqv",
      Macro = SingleTag("meta", "http-equiv", ' content=""'),
      AccelStr = "S+M" },
    { text = "Meta charset",
      Plain = '<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />',
      --Plain = '<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />',
      --Macro = '<meta http-equiv="Content-Type" content="text/html; charset=@Here" />@Back',
      --Macro = SingleTag('meta http-equiv="Content-Type"', "http-equiv", ' content=""'),
      AccelStr = "C+M" },
    { text = "Html Html",
      Macro = PairTag("html", true),
      AccelStr = "A+M" },
    -- O -- mono-format
    { text = "O", Label = true },
    { text = "Code",
      Macro = PairTag("code"),
      AccelStr = "O" },
    { text = "Kbd input",
      Macro = PairTag("kbd"),
      AccelStr = "S+O" },
    { text = "Sample out",
      Macro = PairTag("samp"),
      AccelStr = "C+O" },
    { text = "Variable",
      Macro = PairTag("var"),
      AccelStr = "A+O" },
    -- P -- para-format
    { text = "P", Label = true },
    { text = "Paragraph",
      Macro = PairTag("p"),
      AccelStr = "P" },
    { text = "Text Span",
      Macro = PairTag("span"),
      AccelStr = "S+P" },
    { text = "Division",
      Macro = PairTag("div"),
      AccelStr = "C+P" },
    { text = "Reverse Para",
      Macro = QuoteText("</p>", "<p>"),
      AccelStr = "A+P" },
    -- Q -- quote chars
    { text = "Q", Label = true },
    { text = "simple Quote",
      Macro = QuoteText("&quot;", "&quot;"),
      AccelStr = "Q" },
    { text = "single Quote",
      Macro = QuoteText("&lsaquo;", "&rsaquo;"),
      AccelStr = "S+Q" },
    { text = "double Quote",
      Macro = QuoteText("&laquo;", "&raquo;"),
      AccelStr = "C+Q" },
    { text = "Caption",
      Macro = PairTag("caption"),
      AccelStr = "A+Q" },
    -- R -- break
    { text = "R", Label = true },
    { text = "BReak",
      Plain = '<br />',
      AccelStr = "R" },
    { text = "No-Break",
      Macro = PairTag("nobr"),
      AccelStr = "S+R" },
    { text = "Horiz. Rule",
      Plain = '<hr />',
      AccelStr = "C+R" },
    { text = "Address",
      Macro = PairTag("address", true),
      AccelStr = "A+R" },
    -- T -- table
    { text = "T", Label = true },
    { text = "Table Data",
      Macro = PairTag("td"),
      AccelStr = "T" },
    { text = "Table Row",
      Macro = PairTag("tr"),
      AccelStr = "S+T" },
    { text = "Table Head",
      Macro = PairTag("th"),
      AccelStr = "C+T" },
    { text = "Table",
      Macro = PairTag("table", true),
      AccelStr = "A+T" },
    -- U -- scripts
    { text = "U", Label = true },
    { text = "SubScript",
      Macro = PairTag("sub"),
      AccelStr = "U" },
    { text = "SuperScript",
      Macro = PairTag("sup"),
      AccelStr = "S+U" },
    { text = "Script",
      Macro = PairTag("script", true),
      AccelStr = "C+U" },
    { text = "No Script",
      Macro = PairTag("noscript", true),
      AccelStr = "A+U" },
    -- W -- special chars
    { text = "W", Label = true },
    { text = "nb w-Space",
      Plain = '&nbsp;',
      AccelStr = "W" },
    { text = "em dash",
      Plain = '&mdash;',
      AccelStr = "S+W" },
    { text = "soft hyphen",
      Plain = '&shy;',
      AccelStr = "CS+W" },
    { text = "ampersand",
      Plain = '&amp;',
      AccelStr = "A+W" },
    -- Y -- table ext.
    { text = "Y", Label = true },
    { text = "Table Body",
      Macro = PairTag("tbody", true),
      AccelStr = "Y" },
    { text = "Table Header",
      Macro = PairTag("thead", true),
      AccelStr = "S+Y" },
    { text = "Table Footer",
      Macro = PairTag("tfoot", true),
      AccelStr = "C+Y" },
    { text = "Style",
      Macro = PairTag("style", true),
      AccelStr = "A+Y" },
    --[[
    -- Z -- ??? - TEST
    { text = "Z", Label = true },
    { text = "Z testing",
      Macro = PairTag("test", true),
      AccelStr = "Z" },
    --]]

  }, -- Items

} --- mInsert

---------------------------------------- Data
local Data = {

  Menu = {
    text = L.TemplateInsert,
    Items = { mInsert },

  },

  ["Insert"] = mInsert,

} --- Data

return Data
--------------------------------------------------------------------------------
