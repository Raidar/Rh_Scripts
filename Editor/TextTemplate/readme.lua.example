--[[ TT: readme ]]--

----------------------------------------
--[[ description:
  -- Templates for 'readme'
     (ini-like text in *.rme).
  -- Шаблоны для 'readme'.
--]]
--------------------------------------------------------------------------------

----------------------------------------
local logShow = context.ShowInfo

--------------------------------------------------------------------------------

---------------------------------------- Enums/Sets
--[[ Обозначения:
  a - any case   - любой регистр
  l - lower-case - нижний регистр
  u - upper-case - верхний регистр
  s - small case - со строчной буквы + верхний регистр
  t - title case - с прописной буквы + нижний регистр
  m - mixed case - со строчной буквы + любой регистр
  x - mixed case - c прописной буквы + любой регистр
--]]
local let = { -- Letter enumerations:

  -- any        upper               lower
  alat = 0,     ulat = "A-Z",       llat = "a-z",       -- Latin
  arus = 0,     urus = "ЁА-Я",      lrus = "а-яё",      -- Russian
  alax = 0,     ulax = 0,           llax = 0,           -- Latin-x

} --- let

let.alat = let.ulat..let.llat
let.arus = let.urus..let.lrus
let.llax = let.llat..'`'
let.ulax = let.ulat..'~'
--let.alax = let.alat..'`'
let.alax = let.ulax..let.llax

local sf = function (s) return ("[%s]"):format(s) end -- Множество символов
local cf = function (s) return ("(%s)"):format(s) end -- "Захват" символов

local alat, ulat, llat = sf(let.alat), sf(let.ulat), sf(let.llat)   -- Latin
local arus, urus, lrus = sf(let.arus), sf(let.urus), sf(let.lrus)   -- Russian
local alax, ulax, llax = sf(let.alax), sf(let.ulax), sf(let.llax)   -- Latin-x

local les = { -- Letter sets:

  -- One letter slabs:
  alat = alat, ulat = ulat, llat = llat,
  arus = arus, urus = urus, lrus = lrus,
  alax = alax, ulax = ulax, llax = llax,

  -- Some letter slabs:
  l2lat = llat..llat, l3lat = llat..llat..llat, l2laq = 0,
  l2rus = lrus..lrus, l3rus = lrus..lrus..lrus, l2ruq = 0,
                      u3rus = urus..urus..urus, u3ruq = 0,

  -- Mixed letter slabs (upper + any letters):
  x2lat = ulat..alat, x3lat = ulat..alat..alat,
  x2rus = urus..arus, x3rus = urus..arus..arus, x4rus = 0, x3ruq = 0, x4ruq = 0,
  x2lax = ulax..alax, x3lax = ulax..alax..alax,            x3lay = 0,

  -- Titled letter slabs:
  t2lat = ulat..llat, t3lat = ulat..llat..llat, t4lat = 0, t4laq = 0,
  t2rus = urus..lrus, t3rus = urus..lrus..lrus, t4rus = 0, t4ruq = 0,

  -- Special letter slabs:
  lalaq = llax..alax.."?",
  laruq = lrus..arus.."?",

} --- les

les.l2laq = les.l2lat.."?"
les.l2ruq = les.l2rus.."?"
les.u3ruq = les.u3rus.."?"
les.x2ruq = les.x2rus.."?"
les.x3ruq = les.x3rus.."?"
les.x3lay = les.x3lax.."?"
les.x4rus = les.x3rus..arus
les.x4ruq = les.x4rus.."?"
les.t4lat = ulat..les.l3lat
les.t4rus = urus..les.l3rus
les.t4laq = les.t4lat.."?"
les.t4ruq = les.t4rus.."?"

-- Special letter slabs:
les.yrus = "ё"..urus        -- titled letter prefixed by 'ё'
les.lrusn = "[а-мопр-яё]"   -- russian letter without 'н'
les.crusn = cf(les.lrusn)   -- captured lrusn
--les.lrusl = lrus            -- russian letter without 'л'
les.lrusl = "[а-км-пр-яё]"  -- russian letter without 'л'

--logShow({ let, les }, "Letters")

---------------------------------------- Layout
local bndUt = require "Rh_Scripts.Utils.Binding"
local BindLayout = bndUt.BindLayout
local DefLay, LocLay = BindLayout(), BindLayout("Russian")
local ConvertLayout = bndUt.ConvertLayout
--logShow({ DefLay, LocLay }, "Layouts")

-- Convert string layout.
-- Преобразование раскладки строки.
local function LocToDef (s) --> (string)

  return ConvertLayout(s, LocLay, DefLay, true)

end --
--[[
-- Variant for 'apply' field.
-- Вариант для поля 'apply'.
local function LocAsDef (Cfg) --> (string)

  return LocToDef(Cfg.Template.Result)

end --
--]]

local function Lower (s)

  return s:lower()

end --

local function Upper1st (s)

  return s:sub(1, 1):upper()..s:sub(2, -1)

end --

---------------------------------------- Make
-- Make result from data table.
-- Формирование результата из таблицы данных.
local function makeData (Data, s, f) --> (string | nil) | (bool, string)

  -- Поиск.
  if Data.find and s then f = s:match(Data.find) end
  --logShow({ f, Data }, s)
  if not f then return end -- nil!

  -- Преобразование.
  if Data.cvtfind then f = Data.cvtfind(f) end

  -- Анализ.
  s = Data.data and Data.data[f]
  if not s then return false, f end
  if s == true then s = f end

  -- Преобразование.
  if Data.convert then s = Data.convert(s) end

  -- Форматирование.
  return Data.format and Data.format:format(s) or s

end -- makeData

-- Make common replace by pattern.
-- Формирование обычной замены по шаблону.
local function MakeTPL (Cfg, Match, Other, isLoc) --> (string)

  local s = Cfg.Template.Result
  s = isLoc and LocToDef(s) or s
  --logShow(Cfg, s)
  --logShow({ Match, Other, isLoc }, s, 2)
  local res, f = makeData(Match, s)
  --logShow({ res, f, Cfg }, s)
  if res then return res end
  --res, sn = makeData(Other, s, f)

  if Other then
    return makeData(Other, s, f)

  end

  return false

end -- MakeTPL

---------------------------------------- Tables
local List = {} -- data tables
local Find = {} -- pattern tables
local Fmts = {} -- format strings
local Pats = {} -- pattern strings

---------------------------------------- Languages
-- Языки:
List.LatLang = {

  r = "Rus",
  q = "Epo",
  --
  e = "Eng",
  f = "Fra",
  g = "Ger",
  i = "Ita",
  j = "Jap",
  k = "Ell",
  l = "Lat",
  --
  O = "Rus:old",
  J = "Jap/Rus/Eng",
  E = "Eng/Rus",

} -- LatLang

List.RusLang = {

  ['р'] = "рус.",
  ['ё'] = '[?]',
  -----
  ['а'] = "англ.",
  --['г'] = "греч.",
  ['и'] = "итал.",
  ['к'] = "кит.",
  --['л'] = "лат.",
  ['н'] = "нем.",
  ['п'] = "польск.",
  ['с'] = "исп.",
  ['ф'] = "фр.",
  ['ч'] = "чеш.",
  ['э'] = "эсп.",
  ['я'] = "яп.",

} -- RusLang

---------------------------------------- File types
-- Обозначения типов файлов:
List.FileTypeCode = {

  a = "alt",
  b = "bin",
  c = "chm",
  d = "dok",
  D = "doc",
  e = "tex",
  E = "err",
  f = "fb2",
  F = "tif",
  g = "gif",
  G = "png",
  -- h.
  i = "img",
  j = "jpg",
  J = "jp2",
  k = "pik",
  K = "pic",
  l = "lib",
  -- m.
  -- o.
  p = "pdf",
  q = "ps",
  r = "rtf",
  s = "srg",
  t = "txt",
  v = "djv",
  w = "Site",
  x = "xml",
  z = "exe",
  ["1"] = "pic",
  ["2"] = "fb2",

  -- Browser
  hh = "htm",
  hm = "mht",
  hi = "htm+pic",
  hg = "htm+gif",
  hj = "htm+jpg",

  -- OpenDocument
  ot = "odt",
  os = "ods",
  oq = "odg",
  op = "odp",

  -- MS Office doc
  oo = "doc",
  ow = "doc",
  ox = "xls",
  ov = "vsd",
  oz = "ppt",

  -- Multimedia
  mm = "medio",
  ma = "audio",
  mv = "video",

} -- FileTypeCode

Find.DefFileTypeCode = {

  find = "~%](%w+)$",
  data = List.FileTypeCode,
  format = "[%s]",

}

Find.LocFileTypeCode = { Find.DefFileTypeCode, false, true }

Fmts.FileType = "File: [%s]."

List.FreqUsedTypes = { 'd', 'p', 'q', }

--logShow(List, "List")

---------------------------------------- Situm
-- Обозначения сайтов:
List.DefVerkoSitum = {

  ["b"] = "BookFinder",
  ["c"] = "ChildBooks",
  ["g"] = "GenLib",
  ["h"] = "ShareMan",
  ["k"] = "ProKlondike",
  ["m"] = "MCCME",
  ["o"] = "Others",
  ["p"] = "PubLib",
  ["s"] = "SciLib",
  ["t"] = "Torrent",
  ["u"] = "UmupLib",
  ["w"] = "OwnScan",
  ["y"] = "YugZone",

} -- DefVerkoSitum

Find.DefVerkoSitum = {

  find = "~%}(%w)$",
  data = List.DefVerkoSitum,
  format = " <%s>",

}

Find.LocVerkoSitum = { Find.DefVerkoSitum, false, true }

---------------------------------------- Sekto
-- Разделы (в описании произведения).
local A = '`'

-- Разделы:
local SektoSolo = {

  r = "Redo",   -- Редактор
  u = "Uzum",   -- Область использования
  p = "Part",   -- Перечисление частей
  x = "Klas",   -- Классификация
[A] = "Autor",  -- Автор
  z = "Serio",  -- Серия

} -- SektoSolo
List.SektoSolo = SektoSolo

-- Разделы:
local SektoMult = {

  -- Занято в SektoSolo: rupxz
  -- Занято отдельно: b
  -- Не занято: cdghjl

  w = "Verko",  -- Описание произведения
 --ww = "Verko",  -- Описание произведения
  m = "Nomo",   -- Полное название
 mm = "Nomo",
 ar = "Redo",   -- Редактор
  f = "Tran",   -- Перевод и переводчики
 ff = "Tran",
  n = "Noto",   -- Детализация описания
 nn = "Noto",   --
  e = "Edit",   -- Вид издания
 ee = "Edit",   --
  a = "Autor",  -- Автор
 aa = "Autor",
 ef = "Formo",  -- Форма + формат
 ac = "Cenzer", -- Рецензент
  v = "Versio", -- Буквальный перевод названия
 vv = "Versio",
  o = "Origo",  -- Оригинал
 oo = "Origo",
 yy = "Yuro",   -- Право
 ys = "Suplo",  -- Дополнение
 ii = "Info",   -- Информация
 iv = "Vorto",  -- Ключевые слова
  s = "Anons",  -- Аннотация
 ss = "Anons",
  t = "Tekst",  -- Текст
 tt = "Tekst",
  k = "Kontent",-- Содержание (полное)
 kk = "Kontent",
 kt = "Kont",   -- Краткое содержание
 ko = "Konto",  -- Содержание‑оглавление
 ix = "Index",  -- Указатель
 ie = "Eraro",  -- Опечатки
  q = "Kvalo",  -- Качество
 qq = "Kvalo",

} -- SektoMult
List.SektoMult = SektoMult

-- Подразделы:
List.SektoSubo = {

  w = SektoMult.ww, -- Произведение
  R = SektoMult.ar, -- Редактор
  y = SektoMult.yy, -- Перевод
  n = SektoMult.nn, -- Замечания
  u = SektoSolo.u,  -- Пользование
  E = SektoMult.ee, -- Издание
  p = SektoSolo.p,  -- Части
  a = SektoMult.aa, -- Автор
[A] = SektoSolo[A],
  z = SektoSolo.z,  -- Серия
  --c = SektoMult.ct, -- Содержание
  x = SektoSolo.x,  -- Классификация
  k = SektoMult.kt, -- Содержание

  l = "Alia",       -- Другой
  d = "Aldo",       -- Добавление
  P = "Para",       --< parallelum - Параллельный
  T = "Temo",       -- Тема
  V = "Vario",      -- Изменения

} -- SektoSubo

--logShow({ SektoSolo, SektoMult, SektoSubo }, "List: Sekto")

Fmts.SektoNomo  = "[%s]@Enter"
Fmts.SektoLang  = "[%s]:%s@Enter"
Fmts.SektoSubo  = "[%s.%s]@Enter"
Fmts.SektoLarq  = "[%s.%s]:%s@Enter"

Fmts.KvaloNomo  = "%s — %s — %s — %s — %s.@Enter"
Fmts.KvaloPlen  = "%s%s%s%s%s"
Fmts.KvaloVal1  = "%s%s.@Enter%s"
Fmts.KvaloVal2  = "%s%s — "..Fmts.KvaloVal1.."%s"
Fmts.DefBodyVal = [[
%s

%s

%s

%s]] -- Anons / Tekst / Kontent / Kvalo

Fmts.EditDefNomo = Fmts.SektoNomo..Fmts.FileType.."@Enter"
Fmts.EditDefDesc = "%s@Enter%s"

local Kvalo = {

  Nomo = "Качество: ",
  best = "отличное",
  good = "хорошее",
  mid  = "среднее",
  bad  = "плохое",
  dire = "ужасное",

  Pref = 0,
  Enum = 0,
  Desc = [[
Нужно: .
Особо: с. .
Нет: с. .
Худшие: с. .
Плохие: с. .
Лишние: p. .
с.→p. : .
p.→с. : .
Сделан: с. .
]],
  Line = "@Enter――――――――@Enter",
  toOdd = "@Up@6@End@Left",

} --- Kvalo
List.Kvalo = Kvalo

Kvalo.Pref = Fmts.SektoNomo:format(List.SektoMult.qq)..Kvalo.Nomo
Kvalo.Enum = Fmts.KvaloNomo:format(Kvalo.best, Kvalo.good,
                                   Kvalo.mid, Kvalo.bad, Kvalo.dire)
--logShow(Kvalo, "List: Kvalo")

-- Спец. комбинации:
List.SektoSpec = {

  -- Разделы с языком:
  ww = Fmts.SektoLang:format(List.SektoMult.w,  List.LatLang.r),
  wO = Fmts.SektoLang:format(List.SektoMult.w,  List.LatLang.O),
  wJ = Fmts.SektoLang:format(List.SektoMult.w,  List.LatLang.J),
  wE = Fmts.SektoLang:format(List.SektoMult.w,  List.LatLang.E),

  -- Разделы с подразделами:
  wp = Fmts.SektoSubo:format(List.SektoMult.w,  List.SektoSubo.P),
  fr = Fmts.SektoSubo:format(List.SektoMult.ff, List.SektoSubo.R),
  fn = Fmts.SektoSubo:format(List.SektoMult.ff, List.SektoSubo.n),
  ne = Fmts.SektoSubo:format(List.SektoMult.nn, List.SektoSubo.E),
  ak = Fmts.SektoSubo:format(List.SektoMult.aa, List.SektoSubo.k),
  va = Fmts.SektoSubo:format(List.SektoMult.vv, List.SektoSubo.a),
  --sr = Fmts.SektoSubo:format(List.SektoMult.sc, List.SektoSubo.R),
  --se = Fmts.SektoSubo:format(List.SektoMult.sc, List.SektoSubo.E),
  ['o'..A] = Fmts.SektoSubo:format(List.SektoMult.oo, List.SektoSubo.a),

  -- Разделы с содержимым:
  --wz = Fmts.SektoSubo:format(List.SektoNomo.w, List.SektoSubo.l)..
  wz = Fmts.SektoLarq:format(List.SektoMult.w,  List.SektoSubo.l, "1")..
       '-[tekst].@Enter',

  -- Разделы с качеством:
  qs = Kvalo.Pref..Kvalo.Enum,
  qo = Fmts.KvaloVal1:format(Kvalo.Pref, Kvalo.best, Kvalo.Line),
  --qp = Fmts.KvaloVal2:format(Kvalo.Pref, Kvalo.best, Kvalo.good, Kvalo.Line),
  qi = Fmts.KvaloVal1:format(Kvalo.Pref, Kvalo.good, Kvalo.Line, Kvalo.Line),
  --ql = Fmts.KvaloVal2:format(Kvalo.Pref, Kvalo.good, Kvalo.mid, Kvalo.Line),
  qm = Fmts.KvaloVal1:format(Kvalo.Pref, Kvalo.mid, Kvalo.Line),
  --qn = Fmts.KvaloVal2:format(Kvalo.Pref, Kvalo.mid, Kvalo.bad, Kvalo.Line),
  qb = Fmts.KvaloVal1:format(Kvalo.Pref, Kvalo.bad, Kvalo.Line),
  qt = Fmts.KvaloPlen:format(Kvalo.Pref, Kvalo.Enum,
                             Kvalo.Desc, Kvalo.Line, Kvalo.toOdd),
} -- SektoSpec
do
  local SektoSpec = List.SektoSpec

  -- Разделы с содержимым для [Edit]:
  -- Основные часто используемые разделы:
  local SektoKorp = Fmts.DefBodyVal:format(
                      Fmts.SektoNomo:format(List.SektoMult.ss),
                      Fmts.SektoNomo:format(List.SektoMult.tt),
                      Fmts.SektoNomo:format(List.SektoMult.kk),
                      SektoSpec.qt)
  for _, v in ipairs(List.FreqUsedTypes) do
    local SecEdit = Fmts.EditDefNomo:format(List.SektoMult.ee,
                                            List.FileTypeCode[v])
    SektoSpec['e'..v] = SecEdit
    SektoSpec['b'..v] = Fmts.EditDefDesc:format(SecEdit, SektoKorp)

  end
end -- do

Pats.SektoNoto1 = "`%[("..alax.."-)$"
Pats.SektoNoto2 = ("(%s-)(%s)$"):format(alax, alax)

--logShow(List.SektoSpec, "List: SektoSpec")

local function DescSekto (Cfg, isLoc) --> (string)

  --logShow(Cfg, "Cfg")

  local s = Cfg.Template.Result
  s = isLoc and LocToDef(s) or s
  local sn, ss = s:match(Pats.SektoNoto1)
  if not sn then return false end

  if sn:len() > 1 then
    s = List.SektoMult[sn] -- "Спец." раздел:
    if s then return Fmts.SektoNomo:format(s) end
    s = List.SektoSpec[sn]; if s then return s end

  else
    s = List.SektoSolo[sn] -- Только раздел:
    if s then return Fmts.SektoNomo:format(s) end

  end -- if

  sn, ss = sn:match(Pats.SektoNoto2)
  if not sn then return false end

  --far.Message(sn..'\n'..ss, Cfg.Template.Result)
  s = List.SektoMult[sn]
  if not s then return false end

  -- Подраздел:
  local r = List.SektoSubo[ss] --or SektoSubo[ss:lower()]
  if r then return Fmts.SektoSubo:format(s, r) end

  r = List.LatLang[ss] -- Язык раздела:
  if r then return Fmts.SektoLang:format(s, r) end

  return false

end -- DescSekto

--logShow(List, "List")

---------------------------------------- Language
-- Язык раздела.
List.DefSektoLang = {

  Old = true,
  Rus = true,
  ---
  Eng = true,
  Fra = true,
  Ger = true,
  Ita = true,
  Pol = true,

} -- DefSektoLang

Find.DefSektoLang = {

  find = ":(%a-)$",
  data = List.DefSektoLang,
  format = ":%s",

}

Find.LocSektoLang = { Find.DefSektoLang, false, true }

---------------------------------------- Verko
-- Форма содержания / Content form.
List.KontoFormo = {

  md = "dato",              -- Данные / Dataset
                            --      Content expressed by digitally-encoded data.
                            --      No text/language/music/sound/image.
  mp = "program",           -- Программа / Program
                            --      Content expressed
                            --      through digitally-encoded instructions.

  mo = "obyekt",            -- Предмет / Object
                            --      Content expressed
                            --      through either entities or artefacts.
  mm = "movo",              -- Движение / Movement
                            --      Content expressed through motion. No image.

  mi = "imaqo",             -- Изображение / Image
                            --      Content expressed
                            --      through line, shape, shading, etc.
  mz = "muzik",             -- Музыка / Music
                            --      Content expressed
                            --      through ordered tones or sounds.
  ms = "sono",              -- Звуки / Sounds
                            --      Content expressed
                            --      through sounds made by animals,
                            --      noise or simulated voice etc.
  mv = "voko",              -- Голос / Spoken word
                            --      Content expressed through
                            --      the sound of the human voice talking.

  mt = "tekst",             -- Текст / Text
                            --      Content expressed through
                            --      written words, symbols and numbers.

  mu = "multa",             -- Множественные формы / Multiple content forms
                            --      Mixed content with 3+ applicable forms.
  ma = "alia",              -- Другая форма / Other content form

} -- KontoFormo

-- Оценка содержания / Content qualification.
List.KontoMarko = {

  -- Указание типа / Specification of type // ???
  tk = "karta",             -- Картография / Cartographic
                            --      Content representing
                            --      celestial body at any scale.
  tn = "notaa",             -- Нотация / Notated
                            --      Content expressed through
                            --      a notational system for artistic purposes.
  tf = "forma",             -- Исполнение / Performed
                            --      Content expressed
                            --      in an audible or visible form
                            --      and recorded in a resource.

  -- Указание движения (только для Imaqo) /
  -- Specification of motion (image only)
  iv     = "varia",         -- Изменчивое, движущееся / Moving
                            --      Content that is perceived to be in motion.
  ["if"] = "fiksa",         -- Фиксированное, неподвижное / Still
                            --      Content that is perceived to be static.

  -- Указание размерности (только для Imaqo) /
  -- Specification of dimensionality (image only)
  i2 = "2d",                -- Двумерный / 2-dimensional
                            --      Content that is intended
                            --      to be perceived in two dimensions.
  i3 = "3d",                -- Трёхмерный / 3-dimensional
                            --      Content that is intended
                            --      to be perceived in three dimensions.

  -- Указание ощущений / Sensory specification
  sa = "auzua",             -- Слуховой / Aural
                            --      Content that is intended
                            --      to be perceived through hearing.
  sv = "vizua",             -- Зрительный / Visual
                            --      Content that is intended
                            --      to be perceived through sight.
  st = "tuxua",             -- Осязательный / Tactile
                            --      Content that is intended
                            --      to be perceived through touch.
  sg = "gusta",             -- Вкусовой / Gustatory
                            --      Content that is intended
                            --      to be perceived through taste.
  sf = "flara",             -- Обонятельный / Olfactory
                            --      Content that is intended
                            --      to be perceived through smell.

} -- KontoMarko

-- Тип носителя / Media type.
List.KontoMedio = {

--------------------------------------------------------------------------------
  -- 
  -- p.61

  -- Resource:
  re = "el-res",            -- электронный ресурс / electronic
                            --      For computer-enabled resources.

  ra = "audio",             -- звукозапись / audio
                            --      For audio player-enabled resources.
  rv = "video",             -- видеозапись / video
                            --      For video player-enabled resources.
  rs = "stereo",            -- стереозапись / stereographic
                            --      For stereograph viewer-enabled resources.

  rp = "proyekca",          -- проекционный / projected
                            --      For projector-enabled resources.
  rf = "m-formo",           -- микроформа / microform
                            --      For microform reader-enabled resources.
  rk = "m-skopo",           -- микроскопический / microscopic
                            --      For microscope-enabled resources.

  rn = "no-media",          -- без носителя / unmediated
                            --      No mediation device is necessary.
  rm = "m-media",           -- множественные носители / multiple media
                            --      For resources composed of mixed media (>3).
  rl = "al-media",          -- другие носители / other media
                            --      If none of the other terms… applies.
} -- KontoMedio

Pats.KontoFormo         = "`m("..alax.."-)$"
--Pats.KontoFormo         = "`m("..alax..alax.."-)$"
Fmts.KontoFormo         = "-[%s]."                      -- 
--Fmts.KontoFormo         = "-[%s].@Enter"
Fmts.KontoMarko         = ":(%s)."                      --
Fmts.KontoMedio         = "+[%s]."                      --
Fmts.KontoFormoMarko    = "-[%s].:(%s).@Enter"          -- k -- TODO
Fmts.KontoFormoMedio    = "-[%s].+[%s].@Enter"          -- j
Fmts.KontoOmnuo         = "-[%s].:(%s).+[%s].@Enter"    -- o -- TODO

-- TODO:
-- -[imaqo].:(varia, 2d).+[video].
local function MakeKontentInfo (Cfg, isLoc) --> (string)

  local s = Cfg.Template.Result
  s = isLoc and LocToDef(s) or s
  --far.Message(s, Cfg.Template.Result)
  local sn = s:match(Pats.KontoFormo)
  if not sn then return false end

  --far.Message(tostring(sn)..'\n'..s, Cfg.Template.Result)
  s = List.KontoFormo[sn]
  if s then return Fmts.KontoFormo:format(s) end

  s = List.KontoMarko[sn]
  if s then return Fmts.KontoMarko:format(s) end

  s = List.KontoMedio[sn]
  if s then return Fmts.KontoMedio:format(s) end

  --far.Message(tostring(sn), Cfg.Template.Result)
  if sn:sub(1, 1) == "j" and sn:len() > 2 then
    local sf = List.KontoFormo["m"..(sn:sub(2, 2) or "t")]
    local sm = List.KontoMedio["r"..(sn:sub(3, 3) or "e")]
    --far.Message(sf..'\n'..sm, Cfg.Template.Result)
    if sf and sm then return Fmts.KontoFormoMedio:format(sf, sm) end

  end

  return false

end -- MakeKontentInfo

-- Вид содержания издания.
List.RusKontentVario = {

  ["Пос"] = "Пособие",
  ["Учб"] = "Учебник",
  ["Учп"] = "Учеб. пособие",
  ["Мдп"] = "Метод. пособие",
  ["Умп"] = "Учеб.‑метод. пособие",
  ["Мон"] = "Монография",
  ["Сбк"] = "Сборник",
  ["Спп"] = "Справ. пособие",

} -- RusKontentVario

Find.RusKontentVario = {

  find = "ж(%a-)$",
  data = List.RusKontentVario,

}

---------------------------------------- Autor de verko
-- Создатель произведения.
List.RusVerkoAutor = {

  ["Авс"] = "Авт.‑сост.",
  ["Гря"] = "Гл. ред. изд‑ва",
  ["Сос"] = "Сост.",
  ["Ред"] = "Ред.",
  ["Рея"] = "Ред. изд‑ва",
  ["Худ"] = "Худ.",
  ["Обб"] = "Обл.",
  ["Обх"] = "Обл. — худ.",
  ["Рцз"] = "Рец.",

  ["Вёр"] = "Вёрстка",
  ["Дзн"] = "Дизайн",
  ["Дзб"] = "Диз. обл.",
  --["Диз"] = "Дизайн",
  ["Йзв"] = "Отв. за вып.",
  ["Йкр"] = "Отв. корр.",
  ["Илю"] = "Илл.",
  ["Илх"] = "Илл. — худ.",
  ["Квё"] = "Комп. вёрстка",
  ["Кгр"] = "Комп. граф.",
  ["Кдб"] = "Комп. дизайн обл.",
  ["Кдз"] = "Комп. дизайн",
  ["Кнб"] = "Комп. набор",
  ["Кор"] = "Корр.",
  ["Кпг"] = "Комп. подг.",
  ["Мкт"] = "Макет",
  ["Орм"] = "Оригинал‑макет",
  ["Офб"] = "Оформ. обл.",
  ["Офф"] = "Оформ.",
  ["Офх"] = "Оформ. — худ.",
  ["Фтг"] = "Фот.",

} -- RusVerkoAutor

Find.RusVerkoAutor = {

  find = "[ёЁ](%a-)$",
  data = List.RusVerkoAutor,
  format = "/ %s: .@Left",

}

--[[
Find.RusVerkoAutor = {

  find = "ё(%a-)$",
  data = List.RusVerkoAutor,
  format = "%s.: .@Left",

}

Find.RusVerkoAutorNote = {

  find = "Ё(%a-)$",
  data = List.RusVerkoAutor,
  format = "/ %s.: .@Left",

}
--]]

-- Редактор произведения.
List.LocRedactor = {

  ["В"] = "Вед",
  ["З"] = "Зав",
  ["Г"] = "Гл",
  ["Й"] = "Отв",
  ["Л"] = "Лит",
  ["М"] = "Мл",
  ["Н"] = "Науч",
  ["О"] = "Общ",
  ["С"] = "Спец",
  ["Т"] = "Техн",
  ["Х"] = "Худ",
  ["Ы"] = "Вып",
  ["Я"] = "Зам",

  ["ГО"] = "Гл. отрасл",
  ["ЗЗ"] = "Зам. зав",
  ["МН"] = "Мл. науч",
  ["СН"] = "Ст. науч",
  ["ХТ"] = "Худ.‑техн",

} -- LocRedactor

Find.LocRedactor = {

  find = "[ёЁ](%a-)ред$",
  data = List.LocRedactor,
  format = "/ %s. ред.: .@Left",

}

--[[
Find.LocRedactor = {

  find = "ё(%a-)ред$",
  data = List.LocRedactor,
  format = "%s. ред.: .@Left",

}

Find.LocRedaNote = {

  find = "Ё(%a-)ред$",
  data = List.LocRedactor,
  format = "/ %s. ред.: .@Left",

}
--]]

---------------------------------------- Vario de edito
-- Вид изменений в издании.
List.RusVerkoEditVario = {

  ["дд"] = "доп.",
  ["ии"] = "испр.",
  ["пп"] = "перераб.",
  ["сс"] = "стер.",
  ["ди"] = "доп. и испр.",
  ["ид"] = "испр. и доп.",
  ["дп"] = "доп. и перераб.",
  ["пд"] = "перераб. и доп.",

} -- RusVerkoEditVario

Find.RusVerkoEditVario = {

  find = "ёи(%a-)$",
  data = List.RusVerkoEditVario,

}

---------------------------------------- Translation
-- Язык перевода.
Find.LocTranLang = {

  find = "ёпер(%a-)$",
  data = List.RusLang,
  format = "Пер. с %s",

}

Find.LocTranNote = {

  find = "ёПер(%a-)$",
  data = List.RusLang,
  format = "/ Пер. с %s: .@Left",

}

---------------------------------------- Edition
-- Вид издания.
List.DefEditKind = {

  ['a']  = "Auct.",
  ['e']  = "El.",

} -- DefEditKind

List.LocEditKind = {

  ['а']  = "Авт.",          -- авторское
  ['ар'] = "Арх.",          -- ?
  ['з']  = "Занимат.",      -- занимательное
  ['л']  = "Лит.",          -- литературное
  ['лх'] = "Лит.‑худ.",
  ['н']  = "Науч.",         -- научное
  ['нз'] = "Науч.‑занимат.",
  ['нп'] = "Науч.‑попул.",
  ['нх'] = "Науч.‑худ.",
  ['ны'] = "Науч.‑произв.",
  ['о']  = "Офиц.",         -- официальное
  ['п']  = "Попул.",        -- популярное
  ['пв'] = "Перев.",        -- переводное
  ['р']  = "Рукоп.",        -- рукописное
  ['с']  = "Справ.",        -- справочное
  ['сб'] = "Сбор.",           -- сборочное
  ['у']  = "Учеб.",         -- учебное
  ['х']  = "Худ.",          -- художественное
  ['ы']  = "Произв.",       -- производственное
  ['ыы'] = "Произв.‑практ.",
  ['э']  = "Эл.",           -- электронное
  ['эс'] = "Эл. сб.",

} -- LocEditKind

List.LocEditSpecKind = {

  ['д'] = "Изд. для досуга.",

} -- LocEditSpecKind

Find.DefEditKind = {

  find = "`(%a-)ed$",
  data = List.DefEditKind,
  format = "%s ed.",

}
Find.LocEditKind = {
  { find = "ё(%a-)из$",
    data = List.LocEditKind,
    format = "%s изд.",
  },
  { data = List.LocEditSpecKind },

} --

-- Вариант издания.
List.DefEditVar = {

  ['e'] = "El. equiv.",
  ['t'] = "El. trans.",
  ['m'] = "Ms.",

} -- DefEditVar

List.LocEditVar = {

  ['э'] = "Эл. экв.",
  ['п'] = "Эл. пер.",
  ['р'] = "Рукоп.",

} -- LocEditVar

Find.DefEditVar = {

  find = "`(%a)var$",
  data = List.DefEditVar,
  format = "%s var.",

}

Find.LocEditVar = {

  find = "ё(%a)вар$",
  data = List.LocEditVar,
  format = "%s вар.",

}

-- Версия издания.
List.DefEditVer = {

  ['e'] = "El.",
  ['p'] = "Pr.",

} -- DefEditVer

List.LocEditVer = {

  ['э'] = "Эл.",
  ['п'] = "Печ.",

} -- LocEditVer

Find.DefEditVer = {

  find = "`(%a)ver$",
  data = List.DefEditVer,
  format = "%s ver.",

}

Find.LocEditVer = {

  find = "ё(%a)вер$",
  data = List.LocEditVer,
  format = "%s вер.",

}

-- Файл издания.
Find.DefEditFile = {

  find = "`%](%w+)$",
  data = List.FileTypeCode,
  format = Fmts.FileType.."@Left@2",

}

Find.LocEditFile = { Find.DefEditFile, false, true }

---------------------------------------- Illustrations
-- Иллюстрации.
List.DefEditIll = {

  ["b"] = "Bibl. @Here tit.@Back",
  ["f"] = "Ill.: @Here fig.@Back",
  ["t"] = "Ill.: @Here tab.@Back",
  ["i"] = "Ill.: @Here fig., tab.@Back",
  ["l"] = "Ill.: @Here fig., tab.- Bibl.: tit.@Back",

} -- DefEditIll

List.LocEditIll = {

  ["б"] = "Библ.: @Here назв.@Back",
  ["р"] = "Илл.: @Here рис.@Back",
  ["т"] = "Илл.: @Here табл.@Back",
  ["и"] = "Илл.: @Here рис., табл.@Back",
  ["л"] = "Илл.: @Here рис., табл.- Библ.: назв.@Back",

} -- LocEditIll

Find.DefEditIll = { find = "`il(%a)$", data = List.DefEditIll }

Find.LocEditIll = { find = "ёил(%a)$", data = List.LocEditIll }

---------------------------------------- Classifications
-- Классификации издания.
List.LocClassoOKP = {

  ["кб"] = "953000 — книги, брошюры.",
  ["лн"] = "953004 — лит‑ра науч. и произв.",
  ["лу"] = "953005 — лит‑ра учебная.",
  ["лс"] = "953006 — лит‑ра справочная.",
  ["ло"] = "953007 — лит‑ра официальная.",

} -- LocClassoOKP

Find.LocClassoOKP = {

  find = "ёОКП(%a-)$",
  data = List.LocClassoOKP,
  format = "ОКП ОК‑005‑93, т. 2; %s@Enter",

}

---------------------------------------- Edition form
-- Форматы формы издания.
List.LocFormaFormat = {

  ["6"]  = { "60",  "90", "16" },
  ["7"]  = { "70", "100", "16" },
  ["8"]  = { "84", "108", "32" },

  ["64"] = { "60",  "84", "16" },
  ["68"] = { "60",  "88", "16" },

  ["70"] = { "70", "100", "16" },
  ["78"] = { "70", "108", "16" },

} -- LocFormaFormat

Fmts.FormaFormat    = "Формат: %s×%s/%s."
Fmts.FormaFormatDef = "Формат: %s0×%s0/16.@Left@4"

local function Loc_FormaFmt (Cfg, Pattern) --> (string)

  local s = Cfg.Template.Result
  local sn = s:match(Pattern)
  s = List.LocFormaFormat[sn]
  if s then return Fmts.FormaFormat:format(unpack(s)) end
  if sn:len() > 1 then
    return Fmts.FormaFormatDef:format(sn:sub(1, 1), sn:sub(2, 2))

  end

  return false

end -- Loc_FormaFmt

Pats.LocFormaFmt1 = "ёфф(%d)$"
Pats.LocFormaFmt2 = "ёф(%d%d)$"

-- Бумага формы издания.
List.LocFormaPaper = {

  ['вх'] = "высокохуд",
  ['га'] = "газ",
  ['гл'] = "глазир",
  ['кж'] = "кн.‑журн",
  ['оф'] = "офсет",
  ['пи'] = "писч",
  ['сн'] = "Снегурочка",
  ['ти'] = "тип",
  ['гп'] = "для глуб. печати",
  ['ма'] = "для множ. ап‑тов",

} -- LocFormaPaper

List.LocFormaSpecPaper = {

  ['о'] = List.LocFormaPaper['оф'],
  ['т'] = List.LocFormaPaper['ти'],

} -- LocFormaSpecPaper

Fmts.FormaPaper     = "Бумага: %s."
Fmts.FormaNumbPaper = "Бумага: № %s."
Fmts.FormaSpecPaper = "Бумага: %s. № %s."

local function Loc_FormaPaper (Cfg) --> (string)

  local s = Cfg.Template.Result
  local sn = s:match("ёбу(%w-)$")
  s = List.LocFormaPaper[sn]
  if s then return Fmts.FormaPaper:format(s) end

  s = sn:sub(1, 1)
  if s:find("%d") then return Fmts.FormaNumbPaper:format(s) end

  s = List.LocFormaSpecPaper[s]
  local sd = sn:sub(2, 2)
  if s and sd:find("%d") then
    return Fmts.FormaSpecPaper:format(s, sd)

  end

  return false

end -- Loc_FormaPaper

-- Шрифт формы издания.
List.LocFormaFont = {

  ['ба'] = "Балтика",
  ['бу'] = "букварь",
  ['ге'] = "Гельветика",
  ['ет'] = "Times New Roman",
  ['еш'] = "Times",
  ['зк'] = "Пресс‑Роман",
  ['ла'] = "лат",
  ['ли'] = "литер",
  ['ми'] = "Миниатюра",
  ['нь'] = "Ньютон",
  ['об'] = "обыкн",
  ['он'] = "обыкн., нов",
  ['пр'] = "Прагматика",
  ['ск'] = "Computer Modern Roman",
  ['сь'] = "Computer Modern",
  ['ту'] = "NewtonC",
  ['уг'] = "Europe",
  ['шк'] = "школьный",

} -- LocFormaFont

Find.LocFormaFont = {

  find = "ёшр(%a-)$",
  data = List.LocFormaFont,
  format = "Шрифт: %s.",

}

-- Печать формы издания.
List.LocFormaPrint = {

  ['вы'] = "высокая",
  ['оф'] = "офсетная",
  ['пл'] = "плоская",
  ['рз'] = "ризо",
  ['ул'] = "ультрасетная",

} -- LocFormaPrint

Find.LocFormaPrint = {

  find = "ёпе(%a-)$",
  data = List.LocFormaPrint,
  format = "Печать: %s.",

}

-- Количество листов формы издания.
List.LocFormaList = {

  ['а'] = "у.а.л., б.л., п.л.",
  ['б'] = "б.л., у.п.л., у.и.л.",
  ['ё'] = "у.п.л., у.и.л.",
  ['и'] = "у.и.л.",
  ['й'] = "п.л., у.п.л., у.и.л.",
  ['п'] = "п.л.",
  ['у'] = "у.п.л.",
  ['ф'] = "ф.п.л., у.п.л., у.и.л.",
  ['ц'] = "п.л., у.и.л.",

} -- LocFormaList

Find.LocFormaList = {

  find = "ёлс(%a-)$",
  data = List.LocFormaList,
  format = "Листы: @Here %s@Back",

}

---------------------------------------- Abbr in [Yuro]
-- Сокращение в секции [Yuro].
List.YuroAbr = {

  a = "auct.", -- auctor - автор
  c = "comp.", -- compilator - составитель
  r = "red.",  -- redactor / redactio - редактор / редакция
  t = "tran.", -- translator - переводчик
  q = "pict.", -- pictor - художник
  p = "publ.", -- publicator - издатель / издательство
  d = "div.",  -- divisio - отделение / подразделение
  i = "inst.", -- institutum - организация

  f = "авт.",  -- автор
  s = "сост.", -- составитель
  h = "ред.",  -- редактор / редакция
  g = "пер.",  -- переводчик
  x = "худ.",  -- художник
  z = "изд.",  -- издатель
  v = "отд.",  -- отделение
  b = "инст.", -- институт

} -- YuroAbr

Find.DefYuroAbr = {

  find = "```(%a-)$",
  data = List.YuroAbr,
  cvtfind = Lower,
  convert = Upper1st,

}

Find.LocYuroAbr = { Find.DefYuroAbr, false, true }

---------------------------------------- Verko division
-- Раздел произведения для [Tekst] и [Kont].

-- Простые названия:
List.DefCapitulum = {

  Cnt  = "Contents",
  --Tocs = "Table of contents",
  Desc = "Description",
  Abs  = "Abstract",
  --Frag = "Fragment",
  Ded  = "Dedication",
  Epi  = "Epigraph",
  Ack  = "Acknowledgments",
  Ind  = "Introduction",
  --Indu = "Introduction",
  Crl  = "Corollary",
  Prea = "Preamble",
  Conc = "Conclusion",
  Prf  = "Preface",
  Fwd  = "Foreword",
  Awd  = "Afterword",
  Supp = "Supplement",
  Add  = "Addendum",
  Apx  = "Appendix",
  Aps  = "Appendices",
  Exa  = "Examples",
  Qst  = "Questions",
  Ans  = "Answers",
  Sol  = "Solution",
  Sos  = "Solutions",
  Inq  = "Inquiry",
  Prm  = "Prompts",
  Ins  = "Instructions",
  Exe  = "Exercises",
  Comm = "Comment",
  Coms = "Comments",
  Nts  = "Notes",
  Remk = "Remark",
  Rems = "Remarks",
  --Lit  = "Literature",
  Ref  = "References",
  Ixx  = "Index",
  --Idx  = "Index",
  Nots = "Notations",
  Gls  = "Glossary",
  Trm  = "Terms",
  Def  = "Definitions",
  Abg  = "Abridgements",
  Abb  = "Abbreviations",
  Biog = "Biography",
  Bibl = "Bibliography",
  Hist = "History",
  Chro = "Chronology",
  Ill  = "Illustrations",
  Pht  = "Photo",
  --Cvr  = "+Cover",
  --Dcvr = "+Dust-cover",
  --Flf  = "+Flyleaf",
  --Llf  = "+Loose leaf",
  Iss  = "Issue",
  Imp  = "Imprint",
  Edn  = "Edition",
  Crt  = "Copyright",

} -- DefCapitulum

List.LocCapitulum = {
  ['Атт']  = "Авантитул",   -- Титул с общей информацией (издательство и т.п.)
  ['Ктт']  = "Контртитул",  -- Титул на языке подлинника / с информацией о серии
  ['Ттт']  = "Титул",       -- Титул на языке перевода / с детальной информацией
  ['Тты']  = "Титулы",      -- Титулы
  ['Штт']  = "Шмуцтитул",   -- Титул раздела
  ['Ттй']  = [[
Титул (1)
]],
  ['Ттш']  = [[
Титул (i)
]],
  ['Йтт']  = [[
Авантитул (1)
Контртитул (2)
Титул (3)
]],
  ['Отт']  = [[
Авантитул (1)
Титул оригинала (2)
Титул (3)
]],
  ['Стт']  = [[
Авантитул (1)
Титул оригинала (2)
Сведения об издании (2)
]],
  ['Тто']  = "Титул оригинала", -- Титул на языке подлинника
  ['Огл']  = "Оглавление",
  ['Сод']  = "Содержание",
  ['Опис'] = "Описание",
  ['Анн']  = "Аннотация",
  ['Ансо'] = "Аннотация {с обложки}",
  ['Рец']  = "Рецензия",
  ['Фраг'] = "Фрагмент",
  ['Посв'] = "Посвящение",
  ['Эпф']  = "Эпиграф",
  ['Благ'] = "Благодарности",
  ['Вве']  = "Введение",
  ['Выв']  = "Вывод",
  ['Выы']  = "Выводы",
  ['Вст']  = "Вступление",
  ['Закл'] = "Заключение",
  ['Пред'] = "Предисловие",
  ['Посл'] = "Послесловие",
  ['Прл']  = "Пролог",
  ['Эпл']  = "Эпилог",
  ['Доб']  = "Добавление",
  ['Доп']  = "Дополнение",
  ['Прил'] = "Приложение",
  ['Прия'] = "Приложения",
  ['Прм']  = "Примеры",
  ['Воп']  = "Вопросы",
  ['Отв']  = "Ответы",
  ['Реш']  = "Решение",
  ['Рея']  = "Решения",
  ['Пдс']  = "Подсказки",
  ['Упр']  = "Упражнения",
  ['Спр']  = "Справка",
  ['Комй'] = "Комментарий",
  ['Комм'] = "Комментарии",
  ['Прие'] = "Примечание",
  ['Прим'] = "Примечания",
  ['Зам']  = "Замечания",
  ['Лит']  = "Литература",
  ['Укк']  = "Указатель",
  ['Обо']  = "Обозначения",
  ['Укз']  = "Указание",
  ['Укя']  = "Указания",
  ['Слв']  = "Словарь",
  ['Трм']  = "Термины",
  ['Опр']  = "Определения",
  ['Сок']  = "Сокращения",
  ['Абб']  = "Аббревиатуры",
  ['Биог'] = "Биография",
  ['Библ'] = "Библиография",
  ['Ист']  = "История",
  ['Хрон'] = "Хронология",
  ['Илл']  = "Иллюстрации",
  ['Фото'] = "Фотография",
  ['Редк'] = "Редколлегия",
  ['Испр'] = "Исправление",
  ['Испя'] = "Исправления",
  ['Опеч'] = "Опечатки",
  ['Обл']  = "+Обложка",
  ['Собл'] = "+Суперобложка",
  --['Ттл']  = "+Титул",
  ['Фзц']  = "+Форзац",
  ['Нзц']  = "+Нахзац",
  ['Вкл']  = "+Вкладыш",

} -- LocCapitulum

Find.DefCapitulum = {

  find = "`(%a-)$",
  data = List.DefCapitulum,

}

Find.LocCapitulum = {

  find = "ё(%a-)$",
  data = List.LocCapitulum,

}

-- Составные названия:
Find.LocBrevisCapit = {

  find = "ёКр(%a-)$",
  data = List.LocCapitulum,
  format = "Краткое@Here %s@Back",
  cvtfind = Upper1st,
  convert = Lower,

}

-- Дательный падеж, порядковое числительное:
List.LocDatOrdNumer = {

  ["1"] = "первому",
  ["2"] = "второму",
  ["3"] = "третьему",
  ["4"] = "четвёртому",
  ["5"] = "пятому",
  ["6"] = "шестому",
  ["7"] = "седьмому",
  ["8"] = "восьмому",
  ["9"] = "девятому",
 ["10"] = "десятому",

} -- LocDatOrdNumer

Find.LocCapitPraeNum = {

  find = "ёПреК(%d)$",
  data = List.LocDatOrdNumer,
  format = "Предисловие к@Here %s изданию@Back",

}

-- Дательный падеж, прилагательное, язык:
List.LocDatAdjLang = {

  ["р"] = "русскому",
  ["а"] = "английскому",
  ['и'] = "итальянскому",
  ["н"] = "немецкому",
  ['п'] = "польскому",
  ["ф"] = "французскому",

} -- LocDatAdjLang

Find.LocCapitPraeLang = {

  find = "ёПреК(%a)$",
  data = List.LocDatAdjLang,
  format = "Предисловие к@Here %s изданию@Back",

}

-- Родительный падеж, создатель:
List.LocGenAutor = {

  ["авт"] = "автора",
  ["авв"] = "авторов",
  ["сос"] = "составителя",
  ["сой"] = "составителей",
  ["изв"] = "издательства",
  ["нау"] = "научного редактора",
  ["пер"] = "переводчика",
  ["ред"] = "редактора",
  ["реё"] = "редакции",
  ["рек"] = "редколлегии",
  ["рел"] = "редакционной коллегии",
  ["реп"] = "редактора перевода",
  ["рес"] = "редактора серии",
  ["рец"] = "рецензента",
  ["пол"] = "пользователя",
  ["чит"] = "читателя",
  ["зри"] = "зрителя",
  ["слу"] = "слушателя",

} -- LocGenAutor

Find.LocCapitAbAutor = {

  find = "ёОт(%a-)$",
  cvtfind = Lower,
  data = List.LocGenAutor,
  format = "От %s",

}

Find.LocCapitPraefo = {

  find = "ёПре(%a-)$",
  cvtfind = Lower,
  data = List.LocGenAutor,
  format = "Предисловие %s",

}

Find.LocCapitPostfo = {

  find = "ёПос(%a-)$",
  cvtfind = Lower,
  data = List.LocGenAutor,
  format = "Послесловие %s",

}

Find.LocCapitComment = {

  find = "ёКом(%a-)$",
  cvtfind = Lower,
  data = List.LocGenAutor,
  format = "Комментарий %s",

}

-- Именительный падеж, создатель:
List.DefNomAutor = {

  Aut  = "Author`s",
  Aus  = "Authors'",
  Cmp  = "Compiler`s",
  --Cms  = "Compilers'",
  Trn  = "Translator`s",
  Edr  = "Editor`s",
  Sce  = "Scientific editor`s",
  Tre  = "Translation editor`s",
  Esh  = "Editorship",
  Ser  = "Series",
  Iss  = "Issue",
  Edn  = "Edition",
  Imp  = "Imprint",
  Pbr  = "Publisher`s",
  Pbh  = "Publishing house`s",
  Usr  = "User`s",
  --Rdr = "Reader`s",
  --Vwr = "Viewer`s",
  --Lnr = "Listener`s",

} -- DefNomAutor

-- Предложный падеж, создатель:
List.LocAnsAutor = {

  ["сос"] = "составителе",
  --["сох"] = "составителях",
  ["пер"] = "переводчике",
  ["ред"] = "редакторе",
  ["нау"] = "научном редакторе",
  ["реп"] = "редакторе перевода",
  ["рец"] = "редакции",
  ["сер"] = "серии",
  ["вып"] = "выпуске",
  ["пол"] = "пользователе",
  --["чит"] = "читателе",
  --["зри"] = "зрителе",
  --["слу"] = "слушателе",

} -- LocAnsAutor

List.LocAnsFactoz = {

  ["авт"] = "авторе",
  ["авх"] = "авторах",
  ["изд"] = "издании",
  ["изл"] = "издателе",
  ["изв"] = "издательстве",

} -- LocAnsFactoz

Find.DefCapitDeAutor = {

  find = "`A(%a-)$",
  data = List.DefNomAutor,
  format = "About the@Here %s@Back",

}

Find.DefCapitInformae = {

  find = "`Nt(%a-)$",
  data = List.DefNomAutor,
  format = "%s Note",

}

Find.LocCapitDeAutor = {

  { find = "ёО(%a-)$",
    cvtfind = Lower,
    data = List.LocAnsAutor,
    format = "О %s",
  },
  { data = List.LocAnsFactoz,
    format = "Об %s",
  },

} --

Find.LocCapitInformae = {

  { find = "ёСв(%a-)$",
    cvtfind = Lower,
    data = List.LocAnsAutor,
    format = "Сведения о %s"
  },
  { data = List.LocAnsFactoz,
    format = "Сведения об %s",
  },

} --

-- Родительный падеж, название:
List.LocGenCapitum = {

  ["вве"] = "введения",
  ["зак"] = "заключения",
  ["пре"] = "предисловия",
  ["пос"] = "послесловия",

} -- LocGenCapitum

Find.LocCapitDeCapit = {

  find = "ёИз(%a-)$",
  data = List.LocGenCapitum,
  format = "Из %s",
  cvtfind = Lower,

}

Find.LocCapitLoCapit = {

  find = "ёВм(%a-)$",
  data = List.LocGenCapitum,
  format = "Вместо %s",
  cvtfind = Lower,

}

-- Родительный падеж, название для списка:
List.LocGenCatCapitum = {

  ["лит"] = "литературы",
  ["обо"] = "обозначений",
  ["тер"] = "терминов",
  ["абб"] = "аббревиатур",
  ["сок"] = "сокращений",
  ["илл"] = "иллюстраций",
  ["имн"] = "имён",
  ["упр"] = "упражнений",
  ["раб"] = "работ",

} -- LocGenCatCapitum

Find.LocCatalogCapit = {

  find = "ёСп(%a-)$",
  data = List.LocGenCatCapitum,
  format = "Список %s",
  cvtfind = Lower,

}

Find.LocCatalogIndex = {

  find = "ёУк(%a-)$",
  data = List.LocGenCatCapitum,
  format = "Указатель %s",
  cvtfind = Lower,

}

-- Вид указателя:
List.EngCapitAdjIndex = {

  Au = "Author",
  Af = "Alphabetic",
  Bi = "Bibliographic",
  Nm = "Name",
  Su = "Subject",

} -- EngCapitAdjIndex

List.LocCapitAdjIndex = {

  ["Ав"] = "Авторский",
  ["Ал"] = "Алфавитный",
  ["Ап"] = "Алфавитно‑предметный",
  ["Би"] = "Библиографический",
  ["Им"] = "Именной",
  ["Пи"] = "Предметно‑именной",
  ["Пр"] = "Предметный",
  ["Тм"] = "Тематический",

} -- LocCapitAdjIndexe

List.LocCapitGenIndex = {

  ["Ли"] = "литературы",
  ["Об"] = "обозначений",
  ["Те"] = "терминов",
  ["Аб"] = "аббревиатур",
  ["Со"] = "сокращений",
  ["Ил"] = "иллюстраций",
  ["Им"] = "имён",
  ["Уп"] = "упражнений",
  ["Ус"] = "условных сокращений",

} -- LocCapitGenIndex

Find.DefCapitCatIndex = {

  find = "`(%a-)Ix$",
  data = List.EngCapitAdjIndex,
  format = "%s index",

}

Find.LocCapitCatIndex = {

  { find = "ё(%a-)Ук$",
    data = List.LocCapitAdjIndex,
    format = "%s указатель",
  },
  { data = List.LocCapitGenIndex,
    format = "Указатель %s",
  },

} --

Find.LocCapitCatCapit = {

  { find = "ё(%a-)Сп$",
    data = List.LocCapitAdjIndex,
    format = "%s список",
  },
  { data = List.LocCapitGenIndex,
    format = "Список %s",

  },
} --

-- Родительный падеж, название для перечисления:
List.LocGenEnumCapitum = {

  ["биб"] = "библиотеки",
  ["вып"] = "выпуска",
  ["изд"] = "издания",
  ["сер"] = "серии",
  ["цик"] = "цикла",
  ["изв"] = "издательства",

} -- LocGenEnumCapitum

Find.LocVerkoEnumCapit = {

  find = "ёКн(%w-)$",
  cvtfind = Lower,
  data = List.LocGenEnumCapitum,
  format = "Книги %s",

}

-- Мн. число, прилагательное, пояснение:
List.LocPlurAdjExplan = {

  ["В"] = "Вводные",
  ["З"] = "Заключительные",
  ["О"] = "Основные",
  ["Д"] = "Дополнительные",
  ["С"] = "Сокращённые",
  ["У"] = "Условные",

} -- LocPlurAdjExplan

Find.LocCapitNotula = {

  find = "ё(%a)Зам$",
  data = List.LocPlurAdjExplan,
  format = "%s замечания",

}

Find.LocCapitNotatio = {

  find = "ё(%a)Обо$",
  data = List.LocPlurAdjExplan,
  format = "%s обозначения",

}

Find.LocCapitAbbrevo = {

  find = "ё(%a)Сок$",
  data = List.LocPlurAdjExplan,
  format = "%s сокращения",

}

-- Ед. число, жен. род, прилагательное, пояснение:
List.LocSingFemAdjExplan = {

  ["В"] = "Вводная",
  ["З"] = "Заключительная",
  ["О"] = "Основная",
  ["Д"] = "Дополнительная",
  ["И"] = "Использованная",
  ["А"] = "Аннотированная",
  ["Р"] = "Рекомендуемая",
  ["Ц"] = "Цитированная",

} -- LocSingFemAdjExplan

Find.LocCapitLitter = {

  find = "ё(%a)Лит$",
  data = List.LocSingFemAdjExplan,
  format = "%s литература",

}

-- Ед. число, жен. род, род. падеж, прилагательное, пояснение:
List.LocSingFemGenAdjExplan = {

  ["В"] = "вводной",
  ["З"] = "заключительной",
  ["О"] = "основной",
  ["Д"] = "дополнительной",
  ["И"] = "использованной",
  ["А"] = "аннотированной",
  ["Р"] = "рекомендуемой",
  ["Ц"] = "цитированной",

} -- LocSingFemGenAdjExplan

Find.LocCatalogLitter = {

  find = "ёС(%a)[Лл]ит$",
  data = List.LocSingFemGenAdjExplan,
  format = "Список %s литературы",

}

-- Название информационное:
List.LocInfoCapitum = {

  ["Ас"] = "Адрес",
  ["Рек"] = "Реклама",

} -- LocInfoCapitum

Find.LocCapitPublic = {

  find = "ё(%a-)Изв$",
  data = List.LocInfoCapitum,
  format = "%s издательства",

}

---------------------------------------- Producer
-- Информация о производителе.

-- Места издания:
List.EngPublicLocus = {

  BRF  = "Boca Raton, FL",
  IIN  = "Indianapolis, IN",
  USR  = "Upper Saddle River, NJ",
  EwC  = "Englewood Cliffs, NJ",

} -- EngPublicLocus

Find.DefPublicLocus = {

  find = "`A([%a%`]-)$",
  data = List.EngPublicLocus,
  format = "%s: ",

}

-- Издательства:
List.EngPublicNomen = {

  AH  = "Artech House",
  AP  = "Academic",
  Ap  = "Apress",
  AW  = "Addison Wesley",
  CP  = "CRC Press",
  CS  = "Computer Science",
  CU  = "Cambridge University",
  Ev  = "Elsevier",
  EA  = "Elsevier Academic",
  HM  = "Hungry Minds",
  IBW = "IDG Books Worldwide",
  JWS = "John Wiley & Sons",
  KA  = "Kluwer Academic",
  LR  = "Lakeview Research",
  MGH = "McGraw‑Hill",
  MHO = "McGraw‑Hill/Osborne",
  OMH = "Osborne/McGraw‑Hill",
  MI  = "MIT",
  MK  = "Morgan Kaufmann",
  Ms  = "Microsoft",
  ORy = "O`Reilly",
  ORA = "O`Reilly & Associates",
  OU  = "Oxford University",
  Ps  = "Pearson",
  PP  = "Pearson PTR",
  PH  = "Prentice Hall",
  Pp  = "Peachpit",
  PU  = "Princeton University",
  Ss  = "Sams",
  Sr  = "Springer",
  Sx  = "Sybex",
  Sy  = "Syngress",
  Wy  = "Wiley",
  WW  = "Wordware",
  Wx  = "Wrox",

} -- EngPublicNomen

List.LocPublicNomen = {

  ["НФ"] = "Наука, Физматлит",
  ["Фё"] = "ФИЗМАТЛИТ",
  ["Фт"] = "Физматлит",
  ["ЛО"] = "Ленингр. отд‑ние",
  ["СО"] = "Сиб. отд‑ние",
  ["КИ"] = "Ин‑т компьют. иссл.",
  ["Иж"] = "Иж. респ. тип.",
  ["Уу"] = "Удмурт. ун‑т",
  ------
  ["ВШ"] = "Высш. шк.",
  ["МГ"] = "Мол. гвардия",
  ["МШ"] = "Машиностроение",
  ["Пр"] = "Просвещение",
  ["РС"] = "Радио и связь",
  ["СР"] = "Сов. радио",
  ["ФС"] = "Финансы и статистика",
  ------
  ["ДВ"] = "Вильямс",
  ["ДП"] = "Питер",

} -- LocPublicNomen

Find.DefPublicNomen = {

  find = "`P([%a%`]-)$",
  data = List.EngPublicNomen,

}

Find.LocPublicNomen = {

  find = "ёИ(%a-)$",
  data = List.LocPublicNomen,

}

Find.LocPublicMoscow = {

  find = "ёИМ(%a-)$",
  data = List.LocPublicNomen,
  format = "М.: %s",

}

-- Редакции издательств:
List.LocRedactNomen = {

  ["ЛБ"]  = " лит. по биологии.",
  ["ЛММ"] = " лит. по математике.",
  ["ЛМН"] = " лит. по мат. наукам.",
  ["ЛФ"]  = " лит. по физике.",
  ["ЛХ"]  = " лит. по химии.",
  -------
  ["КЛ"]  = " киберн. лит.",
  ["МЛ"]  = " мат. лит.",
  ["ПЛ"]  = " пер. лит.",
  ["СЛ"]  = " справ. лит.",
  ["ТЛ"]  = " техн. лит.",
  ["ФЛ"]  = " физ. лит.",
  ["ХЛ"]  = " хим. лит.",
  -------
  ["ВТ"] = " лит. по выч. технике.",
  ["НТ"] = " лит. по нов. технике.",
  ["МН"] = " лит. по мат. наукам.",
  ["ИЭ"] = " лит. по информатике и электронике.",
  ["ФА"] = " лит. по физике и астрономии.",
  ["КАГ"] = " косм. иссл., астрономии и геофизики.",
  ["НПФ"] = " науч.‑попул. и науч.‑фантаст. лит.",
  ["НПЮ"] = " науч.‑попул. и юношеск. лит.",
  -------
  ["ВЛ"]  = " вост. лит.",
  ["ЕНЛ"] = " ест.‑науч лит.",
  ["НАЛ"] = " науч.‑атеист. лит.",
  ["НПЛ"] = " науч.‑попул. лит.",
  ["СПЛ"] = " соц.‑полит. лит.",
  ["СЭЛ"] = " соц.‑экон. лит.",
  ["ФМЛ"] = " физ.‑мат. лит.",
  ["ФМС"] = " физ.‑мат. справочников.",
  ["ФТЛ"] = " физ.‑техн. лит.",
  ["ХТЛ"] = " хим.‑техн. лит.",
  -------
  ["ИВТ"] = " лит. по информатике и выч. технике.",
  ["ИНТ"] = " лит. по информатике и нов. технике.",
  ["ИРТ"] = " лит. по информатике и робототехнике.",
  ["КВТ"] = " лит. по кибернетике и выч. технике.",
  -------
  ["БСД"] = " языков Ближнего, Среднего и Дальнего Востока.",

} -- LocRedactNomen

Find.LocRedactNomen = {

  find = "ёР(%a-)$",
  data = List.LocRedactNomen,
  format = "\\ Ред.%s",

}

Find.LocRedPriNomen = {

  find = "ёГР(%a-)$",
  data = List.LocRedactNomen,
  format = "\\ Гл. ред.%s",

}

-- Организации:
List.EngInstitNomen = {

  ACM = "Association for Computing Machinery",

} -- EngInstitNomen

List.LocInstitNomen = {

  ["Укп"]  = "Утверждено к печати",
  ["Утв"]  = "Утверждено",
  --------
  ["МНС"]  = "Министерство науки СССР.",
  ["МОС"]  = "Министерство образования СССР.",
  ["МОН"]  = "Министерство образования и науки РФ.",
  --------
  ["АНС"]  = "Академия наук СССР (АН СССР).",
  ["АПНС"] = "Академия педагогических наук СССР (АПН СССР).",
  ["РАН"]  = "Российская академия наук (РАН).",
  ["СО"]   = "Сибирское отделение (СО).",
  ["ДВО"]  = "Дальневосточное отделение (ДВО).",
  --------
  ["ИИЕТ"] = "Институт истории естествознания и техники (ИИЕТ).",
  ["ИЕТВ"] = "Институт истории естествознания и техники им. С.И. Вавилова (ИИЕТ).",
  --------
  ["ГУ"]   = "государственный университет",
  ["ГПУ"]  = "государственный педагогический университет",
  ["ГТУ"]  = "государственный технический университет",
  ["ГТлУ"] = "государственный технологический университет",
  --------
  ["МГУ"]  = "Московский государственный университет им. М.В. Ломоносова (МГУ).",
  ["НИВЦ"] = "Научно‑исследовательский вычислительный центр (НИВЦ).",
  ["ЦПИ"]  = "Центр прикладных исследований (ЦПИ).",
  ["ВКМ"]  = "Высший колледж математики (ВКМ).",
  ["НМУ"]  = "Независимый московский университет (НМУ).",
  ["МЦНМ"] = "Московский центр непрерывного математического образования (МЦНМО).",
  --------
  ["НГУ"]  = "Новосибирский государственный университет (НГУ).",
  ["ННГУ"] = "Нижегородский государственный университет им. Н.И. Лобачевского (ННГУ).",
  ["МГТУ"] = "Московский государственный технический университет им. Н.Э. Баумана (МГТУ).",
  ["СПГУ"] = "Санкт‑Петербургский государственный университет (СПбГУ).",
  --------
  ["УГУ"]  = "Удмуртский государственный университет (УдмГУ).",
  ["ЦРХД"] = 'НИЦ "Регулярная и хаотическая динамика" (НИЦ "РХД").',
  ["ЖРХД"] = 'Журнал "Регулярная и хаотическая динамика" ("РХД").',
  --------
  ["КГУ"]  = "Казанский государственный университет (КГУ).",
  ["КГТУ"] = "Казанский государственный технический университет@IndEnterим. А.Н. Туполева (КАИ) (КГТУ‑КАИ).",

} -- LocInstitNomen

Find.DefInstitNomen = {

  find = "`O(%a-)$",
  data = List.DefInstitNomen,

}

Find.LocInstitNomen = {

 find = "ёО(%a-)$",
 data = List.LocInstitNomen,

}

-- Подразделения:
List.LocFacultNomen = {

  ["ММФ"]  = "Механико‑математический факультет (ММФ).",
  ["ВМК"]  = "Факультет Вычислительной математики и кибернетики (ВМиК).",
  --------

} -- LocFacultNomen

Find.LocFacultNomen = {

  find = "ёФ(%a-)$",
  data = List.LocFacultNomen,

}

-- Отдельные аббревиатуры:
List.LocSeparaNomen = {

  ["ИНТВ"] = "Итоги науки и техники ВИНИТИ",
  ["СПМФ"] = "Совр. проблемы мат. Фунд. напр.",
  ["РФФИ"] = "  Издание осуществлено при поддержке@Enter"..
             "Российского фонда фундаментальных исследований (проект ).@Left@2",
  --------
} -- LocSeparaNomen

Find.LocSeparaNomen = {

  find = "ёЁ(%a-)$",
  data = List.LocSeparaNomen,

}

---------------------------------------- Reference to notes
-- Ссылки на сноски.
List.NoteRefFormat = {

  ['1'] = '¹', ['2'] = '²', ['3'] = '³', ['4'] = '⁴', ['5'] = '⁵',
  ['6'] = '⁶', ['7'] = '⁷', ['8'] = '⁸', ['9'] = '⁹', ['0'] = '⁰',
  --['+'] = '⁺', ['-'] = '⁻', ['='] = '⁼', ['('] = '⁽', [')'] = '⁾',
  ['₁'] = '¹', ['₂'] = '²', ['₃'] = '³', ['₄'] = '⁴', ['₅'] = '⁵',
  ['₆'] = '⁶', ['₇'] = '⁷', ['₈'] = '⁸', ['₉'] = '⁹', ['₀'] = '⁰',
  --['₊'] = '⁺', ['₋'] = '⁻', ['₌'] = '⁼', ['₍'] = '⁽', ['₎'] = '⁾',

} -- NoteRefFormat

Fmts.NoteRefFormat = "†%s"

local function NoteRefFmt (Cfg, Pattern) --> (string)

  local s = Cfg.Template.Result
  local sn = s:match(Pattern)
  sn = sn:gsub(".", List.NoteRefFormat)
  if sn then
    return Fmts.NoteRefFormat:format(sn)

  end

  return false

end -- NoteRefFmt

Pats.NoteRefFmt = "†([1234567890¹²³⁴⁵⁶⁷⁸⁹⁰₁₂₃₄₅₆₇₈₉₀]+)*"

--------------------------------------------------------------------------------
local noteline = ('―'):rep(8)
local indspace = (' '):rep(20)

--logShow(noteline, "readme")

---------------------------------------- Data
local Data = {
  --[[DO]]--

  -- Controls:
  CharEnum = "%S",
  CharsMin = 3,
  --UseInside = false,
  UseInside = true,
  -- Templates:
  regex = "lua";

  --[[Omniko]]-- Общее:
  -- Разделы описания --> [Verko]
  { find = "^`%["..les.lalaq,   apply = DescSekto },                                -- `[∂∀
  { find =  "^ёх"..les.laruq,   apply = DescSekto, param = true             },      -- ёх∂∀
  -- Языки разделов --> :Rus
  { find = "Ж"..les.t3rus,      apply = MakeTPL, params = Find.LocSektoLang     },  -- Ж∆∂∂
  -- Файл для списка --> [djv]
  { find = "~%][,\\]",          macro = "[]@Left"                           },      -- ~]\
  { find =  "Ёъ[,\\]",          macro = "[]@Left"                           },      -- Ёъ\
  { find = "~%]%d",             apply = MakeTPL, param  = Find.DefFileTypeCode  },  -- ~]ⁿ
  { find =  "Ёъ%d",             apply = MakeTPL, params = Find.LocFileTypeCode  },  -- Ёъⁿ
  { find = "~%]"..les.l2laq,    apply = MakeTPL, param  = Find.DefFileTypeCode  },  -- ~]∂∂
  { find =  "Ёъ"..les.l2ruq,    apply = MakeTPL, params = Find.LocFileTypeCode  },  -- Ёъ∂∂
  -- Сайт для списка --> <SciLib>
  { find = "~}[,\\]",           macro = "<>@Left"                           },      -- ~}\
  { find = "ЁЪ[,\\]",           macro = "<>@Left"                           },      -- ЁЪ\
  { find = "~%}"..les.l2laq,    apply = MakeTPL, params = Find.LocVerkoSitum    },  -- ~}∂∂
  { find =  "ЁЪ"..les.l2ruq,    apply = MakeTPL, params = Find.LocVerkoSitum    },  -- ЁЪ∂∂

  --[[Verko]]-- Произведение:
  -- Информация по содержанию --> -[tekst]. | -[imaqo].- (varia, 2d).- video.
  { find = "`mj?"..les.l2laq,   apply = MakeKontentInfo                     },      -- `m∂∂ / `mj∂∂
  { find = "ёьо?"..les.l2ruq,   apply = MakeKontentInfo, param = true       },      -- ёь∂∂ / ёьо∂∂
  -- Тип --> Учеб. пособие
  { find = "ж"..les.t3rus,      apply = MakeTPL, param = Find.RusKontentVario   },  -- ж∆∂∂
  --{ find = "ж"..les.t3rus.."?", apply = MakeTPL, param = Find.RusKontentVario   },  -- ж∆∂∂
  -- Создатель --> / Сост.: .
  { find = "[ёЁ]"..les.t3rus,   apply = MakeTPL, param = Find.RusVerkoAutor     },  -- ё∆∂∂ / Ё∆∂∂
  --{ find = "Ё"..t3rus,          apply = MakeTPL, param = Find.RusVerkoAutor     },  -- Ё∆∂∂
  -- Номер издания --> 2 изд.
  { find = "ё([1-9]?%d)([Ии]з)",    plain = "%1 %2д."                       },      -- ёⁿⁿиз
  { find = "`([1-9]?%d)([Ee]d)",    plain = "%1 %2."                        },      -- `ⁿⁿed
  -- Вид изменений в издании --> испр. и доп.
  { find = "ёи"..les.lrusl..lrus,
                                apply = MakeTPL, param = Find.RusVerkoEditVario },  -- ёи∂∂

  --[[Redo]]-- Редактор:
  { find = "`EiC",              macro = "Ed.‑in‑Ch.: .@Left", regex = false     },  -- `EiC
  { find = "[ёЁ]"..les.x2ruq.."ред",
                                apply = MakeTPL, param = Find.LocRedactor       },  -- ё∆ред / Ё∆ред
  --{ find = "[ёЁ][ГЖЗЙЛМНОСТХЫЯ]ред",
  --                              apply = MakeTPL, param = Find.LocRedactor       },  -- ё∆ред / Ё∆ред
                         
  --[[Tran]]-- Перевод:
  -- / Пер. с англ.
  { find = "ёПер"..lrus,        apply = MakeTPL, param = Find.LocTranNote       },  -- ёПер∂
  { find = "ёпер"..lrus,        apply = MakeTPL, param = Find.LocTranLang       },  -- ёпер∂

  --[[Edit]]-- Издание:
  -- Вид --> Учеб. изд.
  { find = "`([Ee]d)",          macro = "@Here %1.@Back"                    },      -- `ed
  { find = "ё([Ии]зд)",         macro = "@Here %1.@Back"                    },      -- ёизд
  { find = "`"..les.l2laq.."ed",apply = MakeTPL, param  = Find.DefEditKind      },  -- `∂∂ed
  { find = "ё"..les.l2ruq.."из",apply = MakeTPL, params = Find.LocEditKind      },  -- ё∂∂из
  -- Раздел (в периодике):
  { find = "`sec",              macro = 'Sectio "".@Left@2',  regex = false },      -- `sec
  { find = "ёраз",              macro = 'Раздел "".@Left@2',  regex = false },      -- ёраз
  -- Сорт --> Эл. версия.
  { find = "`(v[ae]r)",         macro = "@Here %1.@Back"                    },      -- `vaer
  { find = "ё(в[ае]р)",         macro = "@Here %1.@Back"                    },      -- ёваер
  { find = "`"..llat.."var",    apply = MakeTPL, param = Find.DefEditVar        },  -- `∂var
  { find = "ё"..lrus.."вар",    apply = MakeTPL, param = Find.LocEditVar        },  -- ё∂вар
  { find = "`"..llat.."ver",    apply = MakeTPL, param = Find.DefEditVer        },  -- `∂ver
  { find = "ё"..lrus.."вер",    apply = MakeTPL, param = Find.LocEditVer        },  -- ё∂вер
  -- File: [djv].
  { find = "`][,\\]",           macro = "File: [].@Left@2",   regex = false },      -- `]\
  { find = "ёъ[,\\]",           macro = "File: [].@Left@2",   regex = false },      -- ёъ\
  { find = "`%]%d",             apply = MakeTPL, param  = Find.DefEditFile      },  -- `]ⁿ
  { find =  "ёъ%d",             apply = MakeTPL, params = Find.LocEditFile      },  -- ёъⁿ
  { find = "`%]"..les.l2laq,    apply = MakeTPL, param  = Find.DefEditFile      },  -- `]∂
  { find =  "ёъ"..les.l2ruq,    apply = MakeTPL, params = Find.LocEditFile      },  -- ёъ∂
  -- Илл.: 1 рис., 1 табл.- Библ. 1 назв.
  { find =  "`il"..llat,        apply = MakeTPL, param  = Find.DefEditIll       },  -- `il∂
  { find =  "ёил"..lrus,        apply = MakeTPL, param  = Find.LocEditIll       },  -- ёил∂

  --[[Klas]]-- Классификация:
  -- Аббревиатуры:
  { find = "ELR",               plain = "УДК",  regex = false               },
  { find = "<<R",               plain = "ББК",  regex = false               },
  { find = "BYL",               plain = "ИНД",  regex = false               },
  { find = "ШЫИТ",              plain = "ISBN", regex = false               },
  -- ОКП ... .
  { find = "ёОКП"..les.l2rus,   apply = MakeTPL, param = Find.LocClassoOKP      },  -- ёОКП∂∂

  --[[Autor]]-- Создатель:
  -- Степени --> к.ф.-м.н. | д.т.н.
  { find = "ё([кд])"..les.crusn.."н",
                                macro = "%1.%2.н."                          },      -- ёк∂н   / ёд∂н
  { find = "ё([кд])"..les.crusn..les.crusn.."н",
                                macro = "%1.%2.‑%3.н."                      },      -- ёк∂∂н  / ёд∂∂н
  { find = "ё([кд])("..les.lrusn..les.lrusn..les.lrusn..")н",
                                macro = "%1.%2.н."                          },      -- ёк∂∂∂н / ёд∂∂∂н
  -- Должности --> м.н.с.
  { find = "ё([вмс])нс",        macro = "%1.н.с." },                                -- ё∂нс
  { find = "ёчлк",              plain = "чл.‑кор.",         regex = false   },      -- ёчлк
  { find = "ёдчл",              plain = "действ. чл.",      regex = false   },      -- ёдчл
  { find = "ёпчл",              plain = "поч. чл.",         regex = false   },      -- ёпчл
  { find = "ёзднт",             plain = "засл. деятель науки и техники.",
                                                            regex = false   },      -- ёзднт

  --[[Formo]]-- Форма издания:
  -- Сдано|Подписано|Поступило --> 2010-10-10.
  { find = "ёсда",              macro = "Сдано .@Left",     regex = false   },      -- ёсда
  { find = "ёсдц",              macro = "Сдано с матриц."                   },      -- ёсдц
  { find = "ёсд([0-1])",        macro = "Сдано 20%1.@Left"                  },      -- ёсдⁿ
  { find = "ёсд([2-9])",        macro = "Сдано 19%1.@Left"                  },
  { find = "ёподп",             macro = "Подписано .@Left", regex = false   },      -- ёподп
  { find = "ёпод([0-1])",       macro = "Подписано 20%1.@Left"              },      -- ёподⁿ
  { find = "ёпод([2-9])",       macro = "Подписано 19%1.@Left"              },
  { find = "ёпост",             macro = "Поступило .@Left", regex = false   },      -- ёпост
  { find = "ёпос([0-1])",       macro = "Поступило 20%1.@Left"              },      -- ёпосⁿ
  { find = "ёпос([2-9])",       macro = "Поступило 19%1.@Left"              },      
  -- Тираж: 1000 экз.
  { find = "`cpa",  macro = "Copia: @Here ex.@Back",        regex = false   },      -- `cpa
  { find = "ётир",  macro = "Тираж: @Here экз.@Back",       regex = false   },      -- ётир
  { find = "ётид",  macro = "Тираж: доп. @Here экз.@Back",  regex = false   },      -- ётид
  { find = "ётт(%d)",           macro = "Тираж: %1@Here 000 экз.@Back"      },      -- ёттⁿ
  { find = "ёттт(%d)",          macro = "Тираж: %1@Here00 экз.@Back"        },      -- ётттⁿ
  { find = "ёт(%d+)т",          macro = "Тираж: %1 @Here000 экз.@Back"      },      -- ётⁿⁿт
  -- Формат: 60¤84/16.
  { find = "`fmt",              macro = "Format: @Here×/.@Back",
                                                            regex = false   },      -- `fmt
  { find = "ёфмт",              macro = "Формат: @Here×/.@Back",
                                                            regex = false   },      -- ёфмт
  { find = "ёфф%d",             apply = Loc_FormaFmt, param = Pats.LocFormaFmt1 },  -- ёффⁿ
  { find = "ёф%d%d",            apply = Loc_FormaFmt, param = Pats.LocFormaFmt2 },  -- ёфⁿⁿ
  -- Бумага: офсет.
  { find = "`cht",              macro = "Charta: .@Left",   regex = false   },      -- `cht
  { find = "ёбум",              macro = "Бумага: .@Left",   regex = false   },      -- ёбум
  { find = "ёбу"..les.l2rus,    apply = Loc_FormaPaper,                     },      -- ёбу∂∂
  { find = "ёбу[от]?[1-9]",     apply = Loc_FormaPaper,                     },      -- ёбу∂ⁿ
  -- Шрифт: литер.
  { find = "`ltr",              macro = "Litter: .@Left",   regex = false   },      -- `ltr
  { find = "ёшрф",              macro = "Шрифт: .@Left",    regex = false   },      -- ёшрф
  { find = "ёшр"..les.l2rus,    apply = MakeTPL, param = Find.LocFormaFont      },  -- ёшр∂∂
  -- Печать: офсетная.
  { find = "`prs",              macro = "Press: .@Left",    regex = false   },      -- `prs
  { find = "ёпеч",              macro = "Печать: .@Left",   regex = false   },      -- ёпеч
  { find = "ёпе"..les.l2rus,    apply = MakeTPL, param = Find.LocFormaPrint     },  -- ёпе∂∂
  { find = "ёкхэ",              macro = "картон хром‑эрзац",regex = false   },      -- ёкхэ
  -- Переплёт: картон.
  { find = "`itx",              macro = "Intex: .@Left",    regex = false   },      -- `itx
  { find = "ёппл",              macro = "Переплёт: .@Left", regex = false   },      -- ёппл
  -- Листы: 2 п.л.
  { find = "`fla",              macro = "Folia: .@Left",    regex = false   },      -- `fla
  { find = "ёлст",              macro = "Листы: .@Left",    regex = false   },      -- ёлст
  { find = "ёлс"..lrus,         apply = MakeTPL, param = Find.LocFormaList      },  -- ёлс∂
  { find = "ёлс([1-9])",        macro = "Листы: %1 п.л."                    },      -- ёлсⁿ
  { find = "ёлс0([1-9])",       macro = "Листы: %1,0 п.л."                  },      -- ёлсⁿ
  { find = "ёлс/",              macro = "(@Here тип. зн. / п.л.).@Back",
                                                            regex = false   },      -- ёлс/

  --[[Serio]]-- Серия: -- TODO: также: (Условный) Цикл/Эпопея и т.п.
  { find = "`ser",              macro = 'Serio@Enter"".@Left@2',
                                                            regex = false   },      -- `ser
  { find = "ёсер",              macro = 'Серия@Enter"".@Left@2',
                                                            regex = false   },      -- ёсер
  { find = "ёусер",             macro = 'Условная серия@Enter"".@Left@2',
                                                            regex = false   },      -- ёусер

  --[[Yuro]]-- Права:
  -- Сокращения --> Авт.
  { find = "```"..alat,         apply = MakeTPL, param  = Find.DefYuroAbr       },  -- ```∀
  { find = "ёёё"..arus,         apply = MakeTPL, params = Find.LocYuroAbr       },  -- ёёё∀
                            -- TODO: Реализовать общий шаблон.
  { find = "ёиря",              plain = "изд. на рус. яз.", regex = false   },      -- ёиря
  { find = "ёпря",              plain = "пер. на рус. яз.", regex = false   },      -- ёпря

  --[[Info]]-- Информация:
  { find = "`h`",               macro = "http:///@Left",    regex = false   },      -- `h`
  { find = "ёрё",               macro = "http:///@Left",    regex = false   },      -- ёрё

  --[[Tekst]]-- Текст:
  --
  { find = Pats.NoteRefFmt,     apply = NoteRefFmt, param = Pats.NoteRefFmt     },  -- †n
  -- Линии сноски --> -------
  { find = "`-`",               plain = noteline,           regex = false   },      -- `-`
  { find = "ё-ё",               plain = noteline,           regex = false   },      -- ё-ё
  -- Текст сноски:
  { find = "`-n",               plain = "Notes",            regex = false   },      -- `-n
  { find = "ё-с",               plain = "Сноски",           regex = false   },      -- ё-с
  -- Отступы спец. текста -->
  { find = "`_`",               plain = indspace,           regex = false   },      -- `_`
  { find = "ё_ё",               plain = indspace,           regex = false   },      -- ё_ё

  --[[Kont]]-- Содержание:
  -- Текст сноски:
  { find = "ёёнум", regex = false,
    plain = "* Нумерация страниц по эл. изд."                               },      -- ёёнум
  { find = "ёёстр", regex = false,
    macro = "* #. Название (Стр. книги/главы/задач/упражнений /@Enter"..
            "Стр. комментариев/ответов/указаний/решений)"                   },      -- ёёстр

  --[[Kvalo]]-- Качество:
  { find = "ёёубр",             macro = "Убрать я. на p. ", regex = false   },      -- ёёубр
  { find = "ёёисп",             macro = "Исправить ссылки в сод",           
                                                            regex = false   },      -- ёёисп

  --[[Abbr]]-- Аббревиатуры в некоторых разделах:
  -- Разделы произведения: --
  { find = "`"..les.t4laq,      apply = MakeTPL, param  = Find.DefCapitulum     },  -- `∆∂∂∂
  { find = "ё"..les.t4ruq,      apply = MakeTPL, param  = Find.LocCapitulum     },  -- ё∆∂∂∂
  { find = "ёКр"..les.t4ruq,    apply = MakeTPL, param  = Find.LocBrevisCapit   },  -- ёКр∆∂∂
  { find = "ёКЧит",             plain = "К читателю",       regex = false   },      -- ёКЧит
  { find = "`PreTE",            macro = "Preface to @Here Edition@Back",
                                                            regex = false   },      -- `PreTE
  { find = "ёПреКИ",            macro = "Предисловие к @Here изданию@Back",
                                                            regex = false   },      -- ёПреКИ
  { find = "ёПреК%d",           apply = MakeTPL, param  = Find.LocCapitPraeNum  },  -- ёПреКⁿ
  { find = "ёПреК"..lrus,       apply = MakeTPL, param  = Find.LocCapitPraeLang },  -- ёПреК∂
  { find = "ёОт"..les.t3rus,    apply = MakeTPL, param  = Find.LocCapitAbAutor  },  -- ёОт∆∂∂
  { find = "`A" ..les.t3lat,    apply = MakeTPL, param  = Find.DefCapitDeAutor  },  -- `A∆∂∂
  { find = "`Nt"..les.t3lat,    apply = MakeTPL, param  = Find.DefCapitInformae },  -- `Nt∆∂∂
  { find = "ёО" ..les.t3rus,    apply = MakeTPL, params = Find.LocCapitDeAutor  },  -- ёО∆∂∂
  { find = "ёСв"..les.t3rus,    apply = MakeTPL, params = Find.LocCapitInformae },  -- ёСв∆∂∂
  { find = "ёПре"..les.t3rus,   apply = MakeTPL, param  = Find.LocCapitPraefo   },  -- ёПре∆∂∂
  { find = "ёПос"..les.t3rus,   apply = MakeTPL, param  = Find.LocCapitPostfo   },  -- ёПос∆∂∂
  { find = "ёКом"..les.t3rus,   apply = MakeTPL, param  = Find.LocCapitComment  },  -- ёКом∆∂∂
  { find = "ёИз"..les.t3rus,    apply = MakeTPL, param  = Find.LocCapitDeCapit  },  -- ёИз∆∂∂
  { find = "ёВм"..les.t3rus,    apply = MakeTPL, param  = Find.LocCapitLoCapit  },  -- ёИз∆∂∂
  { find = "ёКн"..les.t3rus,    apply = MakeTPL, param  = Find.LocVerkoEnumCapit},  -- ёКн∆∂∂
  { find = "ёСп"..les.t3rus,    apply = MakeTPL, param  = Find.LocCatalogCapit  },  -- ёСп∆∂∂
  { find = "ёУк"..les.t3rus,    apply = MakeTPL, param  = Find.LocCatalogIndex  },  -- ёУк∆∂∂
  { find = "`"..les.t2lat.."Ix",apply = MakeTPL, param  = Find.DefCapitCatIndex },  -- `∆∂Ix
  { find = "ё"..les.t2rus.."Ук",apply = MakeTPL, params = Find.LocCapitCatIndex },  -- ё∆∂Ук
  { find = "ё"..les.t2rus.."Сп",apply = MakeTPL, params = Find.LocCapitCatCapit },  -- ё∆∂Сп
  { find = les.yrus.."Зам",     apply = MakeTPL, param  = Find.LocCapitNotula   },  -- ё∆Зам
  { find = les.yrus.."Лит",     apply = MakeTPL, param  = Find.LocCapitLitter   },  -- ё∆Лит
  { find = "ёС"..urus.."[Лл]ит",
                                apply = MakeTPL, param  = Find.LocCatalogLitter },  -- ёС∆Лит
  { find = les.yrus.."Обо",     apply = MakeTPL, param  = Find.LocCapitNotatio  },  -- ё∆Обо
  { find = les.yrus.."Сок",     apply = MakeTPL, param  = Find.LocCapitAbbrevo  },  -- ё∆Сок
  { find = "ё"..les.t3rus.."?Изв",
                                apply = MakeTPL, param  = Find.LocCapitPublic   },  -- ё∆∂Изв
  -- Часто используемое:
  --{ find = "ёМНё",            macro = "М.: Наука, .  с.@Left@4",
  --                                                        regex = false   },      -- ёМНё
  --{ find = "ёФМЛ",            macro = "ФИЗМАТЛИТ",
  --                                                        regex = false   },      -- ёФМЛ
  --{ find = "ёФмл",            macro = "Физматлит",
  --                                                          regex = false   },      -- ёфмл
  -- Издательства / Редакции:
  { find = "`A"..les.x3lay,     apply = MakeTPL, param  = Find.DefPublicLocus   },  -- `A∆∀
  { find = "`P"..les.x3lay,     apply = MakeTPL, param  = Find.DefPublicNomen   },  -- `P∆∀
  { find = "ёИ"..les.x2rus,     apply = MakeTPL, param  = Find.LocPublicNomen   },  -- ёИ∆∀
  { find = "ёИМ"..les.x2rus,    apply = MakeTPL, param  = Find.LocPublicMoscow  },  -- ёИМ∆∀
  { find = "ёР" ..les.u3ruq,    apply = MakeTPL, param  = Find.LocRedactNomen   },  -- ёР∆∆∆
  { find = "ёГР"..les.u3ruq,    apply = MakeTPL, param  = Find.LocRedPriNomen   },  -- ёГР∆∆∆
  -- Организации / Подразделения:
  { find = "`O"..les.x3lay,     apply = MakeTPL, param  = Find.DefInstitNomen   },  -- ёО∆∆∆
  { find = "ёО"..les.x3ruq,     apply = MakeTPL, param  = Find.LocInstitNomen   },  -- ёО∆∆∆
  { find = "ёО"..les.x4ruq,     apply = MakeTPL, param  = Find.LocInstitNomen   },  -- ёО∆∆∆∆
  { find = "ёФ"..les.x3ruq,     apply = MakeTPL, param  = Find.LocFacultNomen   },  -- ёФ∆∆∆
  { find = "ёЁ"..les.x4ruq,     apply = MakeTPL, param  = Find.LocSeparaNomen   },  -- ёЁ∆∆∆∆

  -- Right signs:
  { find = "[ё`][9%(][CcСс][0%)]", plain = "©" },
  { find = "[ё`][9%(][RrКк][0%)]", plain = "®" },
  { find = "[ё`][9%(][PpЗз][0%)]", plain = "℗" },
  { find = "[ё`][9%(][TtЕе][0%)]", plain = "™" },

  --[[END]]--

} --- Data

return Data
--------------------------------------------------------------------------------
