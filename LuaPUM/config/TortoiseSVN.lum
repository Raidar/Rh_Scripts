--[[ LumSVN ]]--

----------------------------------------
--[[ description:
  -- Tortoise SVN menu.
  -- Меню Tortoise SVN.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local utils = require 'context.utils.useUtils'
local tables = require 'context.utils.useTables'
local datas = require 'context.utils.useDatas'
local locale = require 'context.utils.useLocale'

local addNewData = tables.extend

----------------------------------------
local farUt = require "Rh_Scripts.Utils.Utils"

----------------------------------------
-- This menu is not for plugin panel items.
if utils.isPluginPanel() then return end

--------------------------------------------------------------------------------
local unit = {}

----------------------------------------

---------------------------------------- Main data

---------------------------------------- ---- Custom
unit.DefCustom = {
  label = "tSVN",
  name = "TortoiseSVN",
  path = "scripts\\Rh_Scripts\\LuaPUM\\config\\",
  locale = { kind = 'load', },

} -- DefCustom

---------------------------------------- ---- Config
unit.DefCfgData = {
  -- Основные параметры:
  Path    = "",
  --Repo    = "SVN",

  File    = "TortoiseProc.exe",
  Status  = "SubWCRev.exe",
  Command = "repobrowser",

  --RunNone = true,
  --ShowCmd = true,

  --MenuView = "far.Menu",
  MenuView = "RectMenu",
  ShowPath  = true,
  IconChars = true,
  ItemWidth = 25,

  -- Дополнительные параметры:
  onClose = "/closeonend:0",

} -- DefCfgData

---------------------------------------- Main class
local TMain = {
  --Guid       = win.Uuid(""),
  --ConfigGuid = win.Uuid(""),

}
local MMain = { __index = TMain }

local function CreateMain (ArgData)

  local self = {
    ArgData   = addNewData(ArgData, unit.DefCfgData),

    Custom    = false,
    Options   = false,
    History   = false,
    CfgData   = false,
    --DlgTypes  = unit.DlgTypes,
    LocData   = false,

    -- Текущее состояние:
    Path      = false,
    Item      = false,
    Status    = false,

    IsWorkingCopyItem   = false,
    IsSubversionedItem  = false,

  } --- self

  self.ArgData.Custom = self.ArgData.Custom or {} -- MAYBE: addNewData with deep?!
  self.Custom = datas.customize(self.ArgData.Custom, unit.DefCustom)
  --self.Options = addNewData(self.ArgData.Options, unit.DefOptions)
  --logShow(self.Custom.history.full, "history")
  if not utils.fexists(self.Custom.history.full) then return end

  self.History = datas.newHistory(self.Custom.history.full)
  --logShow(self.History, "History")
  self.CfgData = self.History:field(self.Custom.history.field)
  --logShow(self.CfgData, "CfgData")

  setmetatable(self.CfgData, { __index = self.ArgData })
  --logShow(self.CfgData, "CfgData")

  locale.customize(self.Custom)
  --logShow(self.Custom, "Custom")

  return setmetatable(self, MMain)

end -- CreateMain

---------------------------------------- Dialog

---------------------------------------- Main making

---------------------------------------- ---- Prepare
do
-- Localize data.
-- Локализация данных.
function TMain:Localize ()

  self.LocData = locale.getData(self.Custom)
  -- TODO: Нужно выдавать ошибку об отсутствии файла сообщений!!!
  if not self.LocData then return end

  self.L = locale.make(self.Custom, self.LocData)

  return self.L

end ---- Localize

-- Make information about panel item.
-- Формирование информации об элементе панели.
function TMain:MakePanelItemInfo ()

  self.Path = farUt.FarGetAreaItemName.panels()

  local Item = panel.GetCurrentPanelItem(nil, 1)
  self.Item = Item
  local Name  = Item.FileName
  self.Name = Name == ".." and "" or Name
  local Attrs = Item.FileAttributes
  --self.Attrs = Attrs

  if (Name == ".svn" or Name == "_svn") and
     Attrs:find("d", 1, true) and Attrs:find("h", 1, true) then
    return -- SVN Special directory

  end

  self.isDir = not not Attrs:find("d", 1, true)

  --logShow(self, "SVN")
  return true

end ---- MakePanelItemInfo

function TMain:MakeProps ()

  --local Cfg = self.CfgData

  -- Свойства меню:
  local Props = {}
  self.Props = Props

  Props.Id = self.Guid

  --local L = self.LocData
  --Props.Title = L.Calendar

  -- Свойства RectMenu:
  local RM = {
    Cols = 2,
    Order = "V",
    Separators = "V",
    --BoxKind = "R",
    MenuAlign = "CM",
    UncheckedChar = " ",

    IsStatusBar = true,

  } -- RectMenu
  Props.RectMenu = RM

  return true

end ---- MakeProps

-- Подготовка.
-- Preparing.
function TMain:Prepare ()

  self:Localize() -- Локализация

  if not self:MakePanelItemInfo() then return end

  return self:MakeProps()

end ---- Prepare

end -- do
---------------------------------------- ---- Status
local isStatus = {

  Text      = '^%s-SubWCRev%s-%:%s*(.*)',
  NotExist  = "does not exist",
  IsNotaWC  = "is not a working copy",

  NoCommit  = "Last committed at revision 0",
  NoUpdate  = "Updated to revision 0",
  IsModifs  = "Local modifications found",

} --- isStatus

do
-- Check for working copy.
-- Проверка на наличие рабочей копии.
function TMain:isWorkingCopy () --> (bool)

  local Status = self.Status
  --assert(type(Status) == 'string')

  return Status ~= "" and
         (Status:find(isStatus.IsModifs, 1, true) or
         not (Status:find(isStatus.NotExist, 1, true) or
              Status:find(isStatus.IsNotaWC, 1, true)))

end ---- isWorkingCopy

-- Check for subversion present.
-- Проверка на наличие версионирования.
function TMain:isSubversioned () --> (bool)

  local Status = self.Status
  --assert(type(Status) == 'string')

  return not (Status:find(isStatus.NoCommit, 1, true) and
              Status:find(isStatus.NoUpdate, 1, true))

end ---- isSubversioned

-- Parse SVN status.
-- Разбор статуса SVN.
function TMain:ParseStatus ()

  local Status = self:getStatus() or ""
  --logShow(Status, "Status", "w d2")

  if Status == "" then
    local L = self.LocData
    utils.warning(L.eError, L.eStatusFailed)

    return
  end

  self.Status = Status
  self.IsWorkingCopyItem = not not self:isWorkingCopy() -- true/false
  if self.IsWorkingCopyItem then
    self.IsSubversionedItem = not not self:isSubversioned()

  end

  --logShow("'"..unit.Item.Status.."'", "SVN Status")
  --logShow(unit.Item, "SVN")
  return true

end ---- ParseStatus

end -- do
---------------------------------------- ---- Execute
do
  local Formats = { -- SVN

    Run    = '"%s%s" /command:%s %s %s',
    --Run    = '""%s%s /command:%s %s %s""',
    Path   = '/path:"%s"',
    Status = '""%s%s" "%s""',

  } --- Formats

  local runUt = require "Rh_Scripts.Utils.Actions"
  local exec = runUt.Run.Process

-- Get status for panel item.
-- Получение статуса для элемента панели.
function TMain:getStatus () --> (bool)

  local Path = self.Path
  if not Path or Path == "" then return end

  local CfgData = self.CfgData
  self.Status = Formats.Status:format(CfgData.Path, CfgData.Status, Path)
  --logShow({ Path = ItemPath, Status = Status, }, "Item + Status")

  return exec(self.Status)

  --return exec(self.Status.." "..
  --            context.utils.PluginWorkPath..
  --            unit.DefCustom.path.."SubWCRevData.txt")

end ---- getStatus

-- Make parameters.
-- Формирование параметров.
function TMain:MakeParams (Args, Command) --> (string | nil)

  -- Анализ общих параметров.
  local t = {}
  t[#t + 1] = self.CfgData.onClose or ""

  -- Анализ параметров операции.
  local u = Args
  for k = 1, #u do t[#t + 1] = u[k] end

  -- Анализ параметров команды.
  u = self.CfgData[Command]
  if type(u) == 'table' then
    for _, v in pairs(u) do t[#t + 1] = v end

  end

  return table.concat(t, ' ')

end ---- MakeParams

  local runCmdLine = runUt.Run.CmdLine

-- Run SVN operation.
-- Выполнение операции SVN.
function unit.Run (Args, Cfg) --> (bool)

  local self = Args.self
  -- Анализ основных параметров.
  local CfgData = self.CfgData
  local Cmd = Args.command or CfgData.Command
  local Path = ""
  if not Args.nopath then
    Path = Formats.Path:format(self.Path)

  end

  -- Анализ дополнительных параметров.
  local Adds = self:MakeParams(Args, Cmd) or ""

  -- Выполнение операции.
  self.CmdLine = Formats.Run:format(CfgData.Path, CfgData.File, Cmd, Path, Adds)
  --logShow({ CmdLine = self.CmdLine, Args = Args, Adds = Adds, CfgData = CfgData, }, "CmdLine")

  if CfgData.ShowCmd or CfgData[Cmd] and CfgData[Cmd].ShowCmd then
    utils.message("Command: "..Cmd, "Command line:\n"..self.CmdLine, "l")

  end

  if CfgData.RunNone or CfgData[Cmd] and CfgData[Cmd].RunNone then
    return

  end

  return runCmdLine(self.CmdLine)

end ---- Run

-- Show SVN status.
-- Показ статуса SVN.
function unit.ShowStatus (self)

  local Status = self.Status
  utils.message(self.LocData.wSVN_status,
                Status:match(isStatus.Text) or Status, "l")

end -- ShowStatus

end -- do
---------------------------------------- Main control

---------------------------------------- ---- Items
-- Операции пунктов меню.
unit.AllOperations = {

  { command = "checkout",       checked = "↵", },
  { command = "update",         checked = "↶", },
  { command = "commit",         checked = "↗", },
  { separator = true },
  { command = "prevdiff",       checked = "≋", },
  { command = "diff",           checked = "≈", },
  { command = "log",            checked = "☞", },
  { command = "repobrowser",    checked = "♀", name = "browse", },
  { command = "repobrowser",    checked = "☿", name = "browseto", nopath = true, },
  { command = "repostatus",     checked = "≟", name = "change", },
  { command = "revisiongraph",  checked = "♂", name = "revgraph", },
  { separator = true },
  { command = "conflicteditor", checked = "✓", name = "conflict", },
  { command = "resolve",        checked = "✔", },
  { command = "update",         checked = "↩", name = "uptorev"; "/rev", },
  { command = "rename",         checked = "=", },
  { command = "remove",         checked = "−", },
  { command = "revert",         checked = "↻", },
  { command = "cleanup",        checked = "☑", },
  { command = "lock",           checked = "☒", },
  { command = "unlock",         checked = "☐", },
  { separator = true },
  { command = "copy",           checked = "♈", },
  { command = "switch",         checked = "♃", },
  { command = "merge",          checked = "♉", },
  { command = "export",         checked = "↴", },
  { command = "relocate",       checked = "⇲", },
  { separator = true },
  { command = "repocreate",     checked = "♊", name = "create", },
  { command = "blame",          checked = "♁", },
  { command = "add",            checked = "+", },
  { command = "import",         checked = "↱", },
  { command = "ignore",         checked = "×", },
  { separator = true },
  { command = "createpatch",    checked = "✗", name = "patch", },
  { command = "applypatch",     checked = "✘", name = "patching", },
  { command = "properties",     checked = "☝", name = "props", },
  { separator = true },
  { command = "settings",       checked = "⚗", },
  { command = "help",           checked = "?", },
  { command = "about",          checked = "☧", },

} --- AllOperations

-- Состав меню в зависимости от элемента.
unit.Kinds = {

  --browse    = true,
  settings  = true,
  help      = true,
  about     = true,

  [false] = { -- is not a working copy

    [false] = { -- is a file
      browseto  = true,
    },

    [true] = { -- is a directory
      checkout  = true,
      browseto  = true,
      export    = true,
      create    = true,
      import    = true,
    },

  }, -- false

  [true] = { -- is a working copy

    [false] = { -- is a file

      [false] = { -- is unversioned item
        browse    = true,
        add       = true,
        ignore    = true,
      },

      [true] = { -- is subversioned item
        update    = true,
        commit    = true,
        prevdiff  = true,
        diff      = true,
        log       = true,
        browse    = true,
        change    = true,
        revgraph  = true,
        uptorev   = true,
        rename    = true,
        remove    = true,
        revert    = true,
        lock      = true,
        copy      = true,
        switch    = true,
        merge     = true,
        blame     = true,
        ignore    = true,
        patch     = true,
        props     = true,
      },

    },

    [true] = { -- is a directory

      [false] = { -- is unversioned item
        checkout  = true,
        browse    = true,
        export    = true,
        create    = true,
        add       = true,
        import    = true,
        ignore    = true,
      },

      [true] = { -- is subversioned item
        update    = true,
        commit    = true,
        log       = true,
        browse    = true,
        change    = true,
        revgraph  = true,
        conflict  = true,
        resolve   = true,
        uptorev   = true,
        rename    = true,
        remove    = true,
        revert    = true,
        cleanup   = true,
        lock      = true,
        unlock    = true,
        copy      = true,
        switch    = true,
        merge     = true,
        export    = true,
        relocate  = true,
        blame     = true,
        ignore    = true,
        patch     = true,
        patching  = true,
        props     = true,
      },

    },

  }, -- true

} --- Kinds

---------------------------------------- Menu making

---------------------------------------- ---- Items
-- Make menu items list.
-- Формирование списка пунктов.
function TMain:MakeItems (Operations, Kinds) --> (Items)

  local L = self.LocData

  local CfgData = self.CfgData
  local IsIconChars = CfgData.IconChars

  local t = {}
  -- Основные пункты меню.
  for k = 1, #Operations do
    local v = Operations[k]

    if v.separator then
      if #t > 0 and not t[#t].separator then
        t[#t + 1] = v

      end

    elseif v.command then -- TEMP
      local name = v.name or v.command
      v.self = self
      local IsWorkingCopy = self.IsWorkingCopyItem

      --logShow({ q, Kinds, }, "Check", 1)
      --logShow({ IsWorkingCopy, self.isDir, self.IsSubversionedItem, }, name, 1)
      if Kinds[name] or
         (not IsWorkingCopy and
          Kinds[IsWorkingCopy][self.isDir][name]) or
         (IsWorkingCopy and
          Kinds[IsWorkingCopy][self.isDir][self.IsSubversionedItem][name]) then
        t[#t + 1] = {
          text = L["tSVN_"..name] or name,
          Hint = L["hSVN_"..name] or name,
          checked   = IsIconChars and v.checked,
          Function  = unit.Run,
          Arguments = v,

        } ---

      end
    end

  end -- for

  -- Дополнительные пункты меню.
  if CfgData.MenuView ~= "far.Menu" and CfgData.ItemWidth then
    t[#t + 1] = { -- Special line
      text = ("─"):rep(CfgData.ItemWidth),
      disable = true,
      checked = "─",

    } --

  end

  t[#t + 1] = { -- SVN Status
    text = L.tSVN_status,
    Hint = L.hSVN_status,
    Function = unit.ShowStatus,
    Arguments = self,
    checked = "♌",

  } --

  return t

end ---- MakeItems

---------------------------------------- ---- Menu
do

-- Get bottom caption for menu.
-- Получение нижней надписи для меню.
function TMain:GetMenuBottom ()

  local MenuWidth = self.CfgData.ItemWidth + 3
  if self.IsMoreCols then MenuWidth = MenuWidth * 2 end

  local Lost, View
  local Path = self.Path

  if MenuWidth < Path:len() then
    if self.IsMoreCols then
      Lost, View = Path:match("^(.*)(\\[^\\]+\\[^\\]+\\[^\\]+)$")

    else
      Lost, View = Path:match("^(.*)(\\[^\\]+\\[^\\]+)$")

    end
  end
  --logShow({ Path, Lost, View, }, "Parse Path")

  return View and View ~= Path and ".."..View or Path

end ---- GetMenuBottom

-- Make menu.
-- Формирование меню.
function TMain:MakeMenu () --> (Menu)

  local L = self.LocData

  if not self:Prepare() then return end

  local mItems --= unit.MakeItems(AllOperations, Kinds)

  local function MakeItems ()

    if not self:ParseStatus() then return end
    mItems = self:MakeItems(unit.AllOperations, unit.Kinds)

    return mItems

  end -- MakeItems

  --local ColRowsMax = 20
  self.IsMoreCols = true --#mItems > ColRowsMax

  local mProps = self.Props
  mProps.Bottom = self.CfgData.ShowPath and self:GetMenuBottom()
  mProps.RectMenu.Cols = self.IsMoreCols and 2 or 1

  return { -- Tortoise SVN

    text  = L.tSVN,
    Title = L.TortoiseSVN,
    Area = "panels",

    MenuView = self.CfgData.MenuView,

    Props = mProps,

    CfgData = {

      UMenu = {
        BottomHotKeys = false,
        ReturnToUMenu = false,
      }, --

    }, -- CfgData

    --Items = mItems,
    Items = MakeItems,

  } ----

end ---- MakeMenu

end -- do

---------------------------------------- main

function unit.Execute ()

  local _Main = CreateMain()
  if not _Main then return end

  --logShow(Data, "Data", 2)
  --logShow(_Main, "Config", "_d2")
  --logShow(_Main.CfgData, "CfgData", 2)
  --if not _Main.CfgData.Enabled then return end

  if _Main.CfgData.Path ~= "" and
     not utils.fexists(_Main.CfgData.Path.._Main.CfgData.Status) then
    -- TODO: Посмотреть, что делать когда настройки TortoiseSVN не найдены.
    --_Main:Localize()
    --local L = _Main.LocData
    --utils.warning(L.eError, L.ePathNotFound)

    return
  end

  if not _Main:Prepare() then return end
  --_Main:Localize()
  if _Main.Error then return nil, _Main.Error end

  local function MakeMenu ()
    return _Main:MakeMenu()

  end -- MakeMenu

  return {
    text = _Main.LocData.tSVN,

    Items = { MakeMenu },

  }

end ---- Execute

---------------------------------------- Data
local Menu, SError = unit.Execute()
--logShow(Menu, SError or "")

local Data = {

  Menu = Menu,

  ["TortoiseSVN"] = Menu and Menu.Items[1],

} --- Data

return Data
--------------------------------------------------------------------------------
