.Language=English,English
.PluginContents=Rectangular Menu
.Options TabSize=4
.Options CtrlColorChar=\
.Options CtrlStartPosChar=¦

@Contents
$ #Rectangular menu# (RectMenu)
  RectMenu is an utility of menu generation for "LuaFAR for Editor".
 This utility allows to output menus in several rows and columns.

  Parameters of menu output function is similar to far.Menu() parameters.
 Additional properties are specified as following:
  — ¦Properties of whole menu are fields of RectMenu table in Properties.
  — ¦Properties of separated items are fields of RectMenu table in menu item.

    ~Menu properties~@RM_Props@
      ~Whole menu properties~@RM_Props_MenuWhole@
      ~Menu window properties~@RM_Props_MenuWindow@
      ~Menu handling properties~@RM_Props_MenuHandle@
      ~Menu items properties~@RM_Props_MenuItems@
      ~Particular item properties~@RM_Props_ItemPart@
    ~Menu events~@RM_Events@

    ~Details of menu~@RM_Details@
      ~Using macros~@RM_Macros@
      ~Files of utility~@RM_Files@
      ~Functional constraints~@RM_Limits@

 ~Contents~@Contents@

@Help
 ~RectMenu~@Contents@

@RM_Details
$ #Details of menu#: RectMenu
  RectMenu is implemented on a dialog with user‑defined control.
 Therfore it has some functional specifics and constraints.
 Various things of them are described in topics below.

      ~Using macros~@RM_Macros@
      ~Files of utility~@RM_Files@
      ~Functional constraints~@RM_Limits@

 ~Contents~@Contents@

@RM_Macros
$ #Using macros#: RectMenu
  In RectMenu menu keys don't work, if macros was assigned to them,
and this macros are specified in common area (\37Common\-).
  Keys for macros in dialog area (\37Dialog\-) may work,
if they allows, that RectMenu menu is a user‑defined control.
  Therefore in macros checking type of dialog control is required.

    \1FA check scheme:\-
  \3Flocal\37 F = far.Flags\-
  ...
  \3Fif\37 Dlg.ItemType != F.DI_USERCONTROL \3Fthen\-
    <Actions>
  \3Felse\-
    \37Keys"AKey"\-
  \3Fend\-

 ~Contents~@Contents@       ~Details of menu~@RM_Details@

@RM_Files
$ #Files of utility#: RectMenu
  Base files:
    \37RectMenu.lua\-   — ¦RectMenu: Implementation.
    \37RectDraw.lua\-   — ¦RectMenu: Drawing a menu.

 ~Contents~@Contents@       ~Details of menu~@RM_Details@

@RM_Limits
$ #Functional constraints#: RectMenu
  A "Rectangular menu" utility has no implemented following features:
  — ¦Output separators between menu items for menu viewing usability.

  Utility operation (in particular, distinctions from far.Menu)
has following specifics:
  — ¦No connection of items‑separators with menu box.

 ~Contents~@Contents@       ~Details of menu~@RM_Details@

@RM_Props
$ #Menu properties#: RectMenu
  RectMenu menu has a lot of properties that allow to specify
presentation and using of menu and its particular items.

    ~Whole menu properties~@RM_Props_MenuWhole@
    ~Menu window properties~@RM_Props_MenuWindow@
    ~Menu drawing properties~@RM_Props_MenuDraw@
    ~Menu handling properties~@RM_Props_MenuHandle@
    ~Menu items properties~@RM_Props_MenuItems@
    ~Particular item properties~@RM_Props_ItemPart@

 ~Contents~@Contents@

@RM_Props_MenuWhole
$ #Whole menu properties#: RectMenu
  #Shape# (string) — Shape of menu:
  — ¦It defines a horizontal or vertical elongation for menu
    on calculation of unspecified amount of rows and/or columns.
  — ¦\37"H"\- — horizontal, \37"V"\- — vertical (by default).

  #Order# (string) — Output order:
  — ¦It specifies an output of menu items by rows or by columns.
  — ¦\37"H"\- — horizontally (by default), \37"V"\- — vertically.

  #Separators# (string) — Separators presence:
  — ¦It allows to output separators between menu items.
  — ¦Default value is \37""\- (no separators).
  — ¦\37"H"\- — horizontal, \37"V"\- — vertical, \37"HV"\- — both types.

  #Rows# & #Cols# (number) — Menu size (number of rows & columns).
  — ¦If both fields are not specified, a size is so calculated
to get a menu with one row or column dependently from its shape.
  — ¦If any field is specified and it is equal to zero,
a size is so calculated to get an approximate square,
elongated by horizontal or vertical dependently from the shape.
  — ¦If only one field is specified, a value of second field
is so calculated to include all items to menu.
  — ¦If both fields are specified, one of them is considered as specified,
and a value of second is calculated according to previous condition.
A choice of specified field is dependent from a menu shape.

  #Fixed# (table) — Information about fixed rows and columns.
  — ¦It specifies a number of unscrollable rows and columns of menu:
    — #HeadRows# — ¦a number of rows on the top.
    — #FootRows# — ¦a number of rows on the bottom.
    — #HeadCols# — ¦a number of columns on the left.
    — #FootCols# — ¦a number of columns on the right.

  #ReuseProps# (bool) — Reusing menu properties.
  — ¦It allows to use directly menu properties themselves (without wrapping).

 ~Contents~@Contents@       ~Menu properties~@RM_Props@

@RM_Props_MenuWindow
$ #Menu window properties#: RectMenu
  #Position# (table) — Position of left upper angle for menu window.
  — ¦Format: \37{ x = \-<number>\37, y = \-<number> \37}\-
  — ¦A window centering is used by default: \37{ x = -1, y = -1 }\-.

  #MinWidth# & #MinHeight#,
  #MaxWidth# & #MaxHeight# (number) — Constraints for menu output area.
  — ¦Following values are used by default for window field:
      min. width  = \37(MinWidth  or 10)\- characters,
      min. height = \37(MinHeight or  5)\- characters,
      max. width  = \37(MaxWidth  or 80)\- characters,
      max. height = \37(MaxHeight or 25)\- characters.

  #Colors#      (table) — Table of menu colors for usual items.
  #FixedColors# (table) — Table of menu colors for fixed items.
  — ¦They allow to specify colors used for RectMenu output.

  #MenuOnly# (bool) — Output of menu only: without box, indent and titles.
  — ¦It allows to use RectMenu for creating a simple list of items.

  #Shadowed# (bool) — Output of shadow for menu window.
  — ¦It controls a display of shadow for menu window.
  — ¦Default value is \37true\-.
  — ¦If #MenuOnly# \37== true\- it is equal to \37false\-.

  #MenuEdge# (number) — Indent for menu from window edge.
  — ¦It specifies an empty space between menu and window.
  — ¦It defines a value of horizontal indent without a menu box side.
  — ¦A value of vertical indent is about half this value.
  — ¦Default value is \372\-.
  — ¦If #MenuOnly# \37== true\- it is equal to \370\-.

  #MenuAlign# (string) — Menu alignment within window:
  — ¦Default value is \37"LT"\-.
  — ¦Values for horizontal (according to priority):
    \37"L"\- — left, \37"R"\- — right, \37"C"\- — center.
  — ¦Values for vertical (according to priority):
    \37"T"\- — top, \37"B"\- — bottom, \37"M"\- — middle.

  #BoxKind# (string) — Kind of box around menu.
  — ¦Accepted values:
    \37false\- — no box,     \37""\-  — "empty" box,
    \37"S"\-   — single box, \37"D"\- — double box (by default).

  #BoxScroll# (bool) — Output of scroll bars on menu box.
  — ¦It controls a position of scroll bars:
      \37true\-  — ¦show always on box.
      \37false\- — ¦show never on box but show inside box area.
      \37nil\-   — ¦show on box if titles are not present only.

 ~Contents~@Contents@       ~Menu properties~@RM_Props@

@RM_Props_MenuDraw
$ #Menu drawing properties#: RectMenu

  #Edges# (table) — Data to draw edges and to output text.

 ~Contents~@Contents@       ~Menu properties~@RM_Props@

@RM_Props_MenuHandle
$ #Menu handling properties#: RectMenu
  #AltHotOnly# (bool) — Handling hot chars by \37Alt\- pressed only.
  — ¦It allows to use character keys without modifiers for other objectives.

 ~Contents~@Contents@       ~Menu properties~@RM_Props@

@RM_Props_MenuItems
$ #Menu items properties#: RectMenu
  #ReuseItems# (bool) — Reusing menu items.
  — ¦It allows to use directly menu items themselves (without wrapping).

  #TextMax# (number) — Maximal length of menu item text.
  — ¦It is used for creating a menu with equal width columns.

  #LineMax# (number) — Maximal amount of lines for menu item text.
  — ¦It is used for creating a menu with equal height rows.

  #ShowChecked# (bool) — Show check sign for menu items.
  — ¦It controls a show of check sign for menu items:
      \37true\-  — show always.
      \37false\- — show never.
      \37nil\-   — show if only checked items exists.

  #ItemPadding# (bool) — Output of text with padding.
  — ¦It allows to output item text with padding from edges of item.

  #SpacingChar#,
  #SeparatorChar#,
  #CheckedChar#,
  #UncheckedChar#,
  #PaddingChar#,
  #PaddingLChar#,
  #PaddingRChar#,
  #TextMark# — see ~Item properties~@RM_Props_ItemPart@

 ~Contents~@Contents@       ~Menu properties~@RM_Props@

@RM_Props_ItemPart
$ #Item properties#: RectMenu
  #Hint# (string) — Hint text for menu item.
  — ¦It outputs to "status bar" of menu (below menu).
  — ¦It outputs when menu edge is present (see ~MenuOnly & MenuEdge~@RM_Props_MenuWindow@).

  #SpacingChar# (string) — Character used for empty place.
  — ¦It allows to specify common character for filling empty space.

  #SeparatorChar# (string) — Character used for separator item.
  — ¦It allows to specify common character for filling separator item area.

  #CheckedChar# (string) — Character used in checked item.
  — ¦It allows to specify common mark character for checked items.

  #UncheckedChar# (string) — Character used in unchecked item.
  — ¦It allows to specify common non‑mark character for unchecked items.

  #PaddingChar# (string) — Character for text padding from edge of item.

  #PaddingLChar# (string) — Character for text padding from left edge of item.

  #PaddingRChar# (string) — Character for text padding from right edge of item.

  #TextMark# (table) — Selection of text part for menu item.
  — ¦Format:
    \37{ \-<Pattern for find>\37, \-<Start position>\37, \-<Plain find flag> \37}\-
    or
    \37{ \-<Start position of selection>\37, \-<End position of selection> \37}\-.

 ~Contents~@Contents@       ~Menu properties~@RM_Props@

@RM_Events
$ #Menu events#: RectMenu
  RectMenu has several properties that allow
to specify own response of menu to particular events.

  ~OnKeyPress~@RM_Event_KeyPress@ — an event on key press.
  ~OnChooseItem~@RM_Event_ChooseItem@ — an event on item choose.

 ~Contents~@Contents@

@RM_Event_KeyPress
$ #OnKeyPress# event: RectMenu
  The event appears if RectMenu perform no own actions
on key press. RectMenu handles itself \37F1\-, \37Esc\-, \37Enter\-,
arrow keys (with \37Ctrl\- too; on selected item presence),
hot chars keys (see also ~AltHotOnly~@RM_Props_MenuHandle@ property),
acceleration keys (\37AccelKey\- property of menu items)
and breaking keys (third parameter \37BreakKeys\- of menu output function).

  Declaration:
    \37OnKeyPress (FarKey, SelectIndex)\-

  Parameters:
    \37FarKey\-      (number) — ¦a key pressed in menu.
    \37SelectIndex\- (number) — ¦index of current item.

  Result:
    \37Table\- (table) — ¦array table of menu output function parameters:
          \37{ Properties, Items, BreakKeys }\- — for menu update.
          (no table) — result that is passed to handler of menu window.
            \37false\- — ¦if it does not have any changes of menu window.
            \37nil\-   — ¦for calling inner handler of menu window.
    \37Flags\- (table) — ¦record table of special handling flags:
          \37isCancel\-    — ¦close window as by cancel.
          \37isClose\-     — ¦close window as by item choose.
          \37isRedraw\-    — ¦redrawing of menu window.
          \37isRedrawAll\- — ¦redrawing of all FAR windows.

 ~Contents~@Contents@     ~Menu events~@RM_Events@
